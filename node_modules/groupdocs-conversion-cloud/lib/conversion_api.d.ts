/// <reference types="node" />
import axios = require("axios");
import { Configuration } from "./configuration";
import * as model from "./model";
export * from "./model";
export * from "./configuration";
/**
 * GroupDocs.Conversion Cloud API
 */
export declare class ConvertApi {
    /**
     * Creates new instance of ConvertApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): ConvertApi;
    /**
     * Creates new instance of ConvertApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): ConvertApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Converts specified input document to format specified in the convertSettings with specified options
     * @param requestObj contains request parameters
     */
    convertDocument(requestObj: model.ConvertDocumentRequest): Promise<Array<model.StoredConvertedResult>>;
    /**
     * Converts specified input document to format specified in the convertSettings with specified options
     * @param requestObj contains request parameters
     */
    convertDocumentDownload(requestObj: model.ConvertDocumentRequest): Promise<Buffer>;
    /**
     * Converts input document file to format specified
     * @param requestObj contains request parameters
     */
    convertDocumentDirect(requestObj: model.ConvertDocumentDirectRequest): Promise<Buffer>;
}
/**
 * GroupDocs.Conversion Cloud API
 */
export declare class FileApi {
    /**
     * Creates new instance of FileApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): FileApi;
    /**
     * Creates new instance of FileApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): FileApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Copy file
     * @param requestObj contains request parameters
     */
    copyFile(requestObj: model.CopyFileRequest): Promise<axios.AxiosResponse>;
    /**
     * Delete file
     * @param requestObj contains request parameters
     */
    deleteFile(requestObj: model.DeleteFileRequest): Promise<axios.AxiosResponse>;
    /**
     * Download file
     * @param requestObj contains request parameters
     */
    downloadFile(requestObj: model.DownloadFileRequest): Promise<Buffer>;
    /**
     * Move file
     * @param requestObj contains request parameters
     */
    moveFile(requestObj: model.MoveFileRequest): Promise<axios.AxiosResponse>;
    /**
     * Upload file
     * @param requestObj contains request parameters
     */
    uploadFile(requestObj: model.UploadFileRequest): Promise<model.FilesUploadResult>;
}
/**
 * GroupDocs.Conversion Cloud API
 */
export declare class FolderApi {
    /**
     * Creates new instance of FolderApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): FolderApi;
    /**
     * Creates new instance of FolderApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): FolderApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Copy folder
     * @param requestObj contains request parameters
     */
    copyFolder(requestObj: model.CopyFolderRequest): Promise<axios.AxiosResponse>;
    /**
     * Create the folder
     * @param requestObj contains request parameters
     */
    createFolder(requestObj: model.CreateFolderRequest): Promise<axios.AxiosResponse>;
    /**
     * Delete folder
     * @param requestObj contains request parameters
     */
    deleteFolder(requestObj: model.DeleteFolderRequest): Promise<axios.AxiosResponse>;
    /**
     * Get all files and folders within a folder
     * @param requestObj contains request parameters
     */
    getFilesList(requestObj: model.GetFilesListRequest): Promise<model.FilesList>;
    /**
     * Move folder
     * @param requestObj contains request parameters
     */
    moveFolder(requestObj: model.MoveFolderRequest): Promise<axios.AxiosResponse>;
}
/**
 * GroupDocs.Conversion Cloud API
 */
export declare class InfoApi {
    /**
     * Creates new instance of InfoApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): InfoApi;
    /**
     * Creates new instance of InfoApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): InfoApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Returns metadata for provided document
     * @param requestObj contains request parameters
     */
    getDocumentMetadata(requestObj: model.GetDocumentMetadataRequest): Promise<model.DocumentMetadata>;
    /**
     * Returns all supported conversion types
     * @param requestObj contains request parameters
     */
    getSupportedConversionTypes(requestObj: model.GetSupportedConversionTypesRequest): Promise<Array<model.SupportedFormat>>;
}
/**
 * GroupDocs.Conversion Cloud API
 */
export declare class LicenseApi {
    /**
     * Creates new instance of LicenseApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): LicenseApi;
    /**
     * Creates new instance of LicenseApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): LicenseApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Get license consumption
     * @param requestObj contains request parameters
     */
    getConsumptionCredit(): Promise<model.ConsumptionResult>;
    /**
     * Get license information
     * @param requestObj contains request parameters
     */
    getLicenseInfo(): Promise<model.LicenseInfo>;
}
/**
 * GroupDocs.Conversion Cloud API
 */
export declare class StorageApi {
    /**
     * Creates new instance of StorageApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): StorageApi;
    /**
     * Creates new instance of StorageApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): StorageApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Get disc usage
     * @param requestObj contains request parameters
     */
    getDiscUsage(requestObj: model.GetDiscUsageRequest): Promise<model.DiscUsage>;
    /**
     * Get file versions
     * @param requestObj contains request parameters
     */
    getFileVersions(requestObj: model.GetFileVersionsRequest): Promise<model.FileVersions>;
    /**
     * Check if file or folder exists
     * @param requestObj contains request parameters
     */
    objectExists(requestObj: model.ObjectExistsRequest): Promise<model.ObjectExist>;
    /**
     * Check if storage exists
     * @param requestObj contains request parameters
     */
    storageExists(requestObj: model.StorageExistsRequest): Promise<model.StorageExist>;
}
