"use strict";
/*
* The MIT License (MIT)
*
* Copyright (c) 2003-2024 Aspose Pty Ltd
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.DcmLoadOptions = exports.DcmConvertOptions = exports.CsvLoadOptions = exports.Cf2LoadOptions = exports.BmpLoadOptions = exports.BmpConvertOptions = exports.XmlLoadOptions = exports.WordProcessingLoadOptions = exports.WordProcessingConvertOptions = exports.WebLoadOptions = exports.WebConvertOptions = exports.TxtLoadOptions = exports.TxtConvertOptions = exports.SpreadsheetLoadOptions = exports.SpreadsheetConvertOptions = exports.PresentationLoadOptions = exports.PresentationConvertOptions = exports.PersonalStorageLoadOptions = exports.PdfLoadOptions = exports.PdfConvertOptions = exports.PDLConvertOptions = exports.OneLoadOptions = exports.ImageLoadOptions = exports.ImageConvertOptions = exports.FileVersion = exports.EmailLoadOptions = exports.EBookConvertOptions = exports.DiagramLoadOptions = exports.CadLoadOptions = exports.WatermarkOptions = exports.SupportedFormat = exports.StoredConvertedResult = exports.StorageFile = exports.StorageExist = exports.ObjectExist = exports.ModelError = exports.LoadOptions = exports.LicenseInfo = exports.FilesUploadResult = exports.FilesList = exports.FileVersions = exports.FieldLabel = exports.ErrorDetails = exports.DocumentMetadata = exports.DiscUsage = exports.ConvertSettings = exports.ConvertOptions = exports.ConsumptionResult = exports.ApiErrorResponse = exports.ApiError = void 0;
exports.OdtConvertOptions = exports.OdsLoadOptions = exports.OdsConvertOptions = exports.OdpLoadOptions = exports.OdpConvertOptions = exports.OdgLoadOptions = exports.OdgConvertOptions = exports.MsgLoadOptions = exports.MobiLoadOptions = exports.MhtLoadOptions = exports.JpxLoadOptions = exports.JpmLoadOptions = exports.JpgLoadOptions = exports.JpgConvertOptions = exports.JpfLoadOptions = exports.JpegLoadOptions = exports.Jp2LoadOptions = exports.J2kLoadOptions = exports.J2cLoadOptions = exports.IgsLoadOptions = exports.IfcLoadOptions = exports.IcoLoadOptions = exports.IcoConvertOptions = exports.GifLoadOptions = exports.GifConvertOptions = exports.EmlxLoadOptions = exports.EmlLoadOptions = exports.EmfLoadOptions = exports.EmfConvertOptions = exports.DxfLoadOptions = exports.DwtLoadOptions = exports.DwgLoadOptions = exports.DwfxLoadOptions = exports.DwfLoadOptions = exports.DotxLoadOptions = exports.DotxConvertOptions = exports.DotmLoadOptions = exports.DotmConvertOptions = exports.DotLoadOptions = exports.DotConvertOptions = exports.DocxLoadOptions = exports.DocxConvertOptions = exports.DocmLoadOptions = exports.DocmConvertOptions = exports.DocLoadOptions = exports.DocConvertOptions = exports.DngLoadOptions = exports.DngConvertOptions = exports.DjvuConvertOptions = exports.DgnLoadOptions = void 0;
exports.VtxLoadOptions = exports.VsxLoadOptions = exports.VstxLoadOptions = exports.VstmLoadOptions = exports.VstLoadOptions = exports.VssxLoadOptions = exports.VssmLoadOptions = exports.VssLoadOptions = exports.VsdxLoadOptions = exports.VsdmLoadOptions = exports.VsdLoadOptions = exports.VdxLoadOptions = exports.VdwLoadOptions = exports.TsvLoadOptions = exports.TsvConvertOptions = exports.TiffLoadOptions = exports.TiffConvertOptions = exports.TifLoadOptions = exports.StlLoadOptions = exports.RtfConvertOptions = exports.PstLoadOptions = exports.PsdLoadOptions = exports.PsdConvertOptions = exports.PptxLoadOptions = exports.PptxConvertOptions = exports.PptmLoadOptions = exports.PptmConvertOptions = exports.PptLoadOptions = exports.PptConvertOptions = exports.PpsxLoadOptions = exports.PpsxConvertOptions = exports.PpsmLoadOptions = exports.PpsmConvertOptions = exports.PpsLoadOptions = exports.PpsConvertOptions = exports.PotxLoadOptions = exports.PotxConvertOptions = exports.PotmLoadOptions = exports.PotmConvertOptions = exports.PngLoadOptions = exports.PngConvertOptions = exports.PltLoadOptions = exports.OttLoadOptions = exports.OttConvertOptions = exports.OtsLoadOptions = exports.OtsConvertOptions = exports.OtpLoadOptions = exports.OtpConvertOptions = exports.OstLoadOptions = exports.OdtLoadOptions = void 0;
exports.StorageExistsRequest = exports.ObjectExistsRequest = exports.GetFileVersionsRequest = exports.GetDiscUsageRequest = exports.GetSupportedConversionTypesRequest = exports.GetDocumentMetadataRequest = exports.MoveFolderRequest = exports.GetFilesListRequest = exports.DeleteFolderRequest = exports.CreateFolderRequest = exports.CopyFolderRequest = exports.UploadFileRequest = exports.MoveFileRequest = exports.DownloadFileRequest = exports.DeleteFileRequest = exports.CopyFileRequest = exports.ConvertDocumentDirectRequest = exports.ConvertDocumentRequest = exports.typeMap = exports.enumsMap = exports.TifConvertOptions = exports.JpxConvertOptions = exports.JpmConvertOptions = exports.JpfConvertOptions = exports.JpegConvertOptions = exports.Jp2ConvertOptions = exports.J2kConvertOptions = exports.J2cConvertOptions = exports.XltxLoadOptions = exports.XltxConvertOptions = exports.XltmLoadOptions = exports.XltmConvertOptions = exports.XlsxLoadOptions = exports.XlsxConvertOptions = exports.XlsmLoadOptions = exports.XlsmConvertOptions = exports.XlsbLoadOptions = exports.XlsbConvertOptions = exports.XlsLoadOptions = exports.XlsConvertOptions = exports.Xls2003LoadOptions = exports.Xls2003ConvertOptions = exports.WmfLoadOptions = exports.WmfConvertOptions = exports.WebpLoadOptions = exports.WebpConvertOptions = void 0;
// tslint:disable: completed-docs
class ApiError {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ApiError.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ApiError = ApiError;
/**
 * Attribute type map
 */
ApiError.attributeTypeMap = [
    {
        name: "code",
        baseName: "code",
        type: "string",
    },
    {
        name: "message",
        baseName: "message",
        type: "string",
    },
    {
        name: "description",
        baseName: "description",
        type: "string",
    },
    {
        name: "dateTime",
        baseName: "dateTime",
        type: "Date",
    },
    {
        name: "innerError",
        baseName: "innerError",
        type: "ApiError",
    }
];
// tslint:disable: completed-docs
class ApiErrorResponse {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ApiErrorResponse.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ApiErrorResponse = ApiErrorResponse;
/**
 * Attribute type map
 */
ApiErrorResponse.attributeTypeMap = [
    {
        name: "requestId",
        baseName: "requestId",
        type: "string",
    },
    {
        name: "error",
        baseName: "error",
        type: "ApiError",
    }
];
/**
 * Metered license consumption information
 */
// tslint:disable: completed-docs
class ConsumptionResult {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ConsumptionResult.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ConsumptionResult = ConsumptionResult;
/**
 * Attribute type map
 */
ConsumptionResult.attributeTypeMap = [
    {
        name: "credit",
        baseName: "credit",
        type: "number",
    },
    {
        name: "quantity",
        baseName: "quantity",
        type: "number",
    }
];
/**
 * ConvertOptions base
 */
// tslint:disable: completed-docs
class ConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ConvertOptions.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ConvertOptions = ConvertOptions;
/**
 * Attribute type map
 */
ConvertOptions.attributeTypeMap = [
    {
        name: "fromPage",
        baseName: "fromPage",
        type: "number",
    },
    {
        name: "pagesCount",
        baseName: "pagesCount",
        type: "number",
    },
    {
        name: "pages",
        baseName: "pages",
        type: "Array<number>",
    },
    {
        name: "watermarkOptions",
        baseName: "watermarkOptions",
        type: "WatermarkOptions",
    }
];
/**
 * Defines conversion request
 */
// tslint:disable: completed-docs
class ConvertSettings {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ConvertSettings.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ConvertSettings = ConvertSettings;
/**
 * Attribute type map
 */
ConvertSettings.attributeTypeMap = [
    {
        name: "storageName",
        baseName: "storageName",
        type: "string",
    },
    {
        name: "filePath",
        baseName: "filePath",
        type: "string",
    },
    {
        name: "format",
        baseName: "format",
        type: "string",
    },
    {
        name: "loadOptions",
        baseName: "loadOptions",
        type: "LoadOptions",
    },
    {
        name: "convertOptions",
        baseName: "convertOptions",
        type: "ConvertOptions",
    },
    {
        name: "outputPath",
        baseName: "outputPath",
        type: "string",
    },
    {
        name: "fontsPath",
        baseName: "fontsPath",
        type: "string",
    }
];
/**
 * Class for disc space information.
 */
// tslint:disable: completed-docs
class DiscUsage {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return DiscUsage.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DiscUsage = DiscUsage;
/**
 * Attribute type map
 */
DiscUsage.attributeTypeMap = [
    {
        name: "usedSize",
        baseName: "usedSize",
        type: "number",
    },
    {
        name: "totalSize",
        baseName: "totalSize",
        type: "number",
    }
];
/**
 * Contains a document metadata
 */
// tslint:disable: completed-docs
class DocumentMetadata {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return DocumentMetadata.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DocumentMetadata = DocumentMetadata;
/**
 * Attribute type map
 */
DocumentMetadata.attributeTypeMap = [
    {
        name: "fileType",
        baseName: "fileType",
        type: "string",
    },
    {
        name: "pageCount",
        baseName: "pageCount",
        type: "number",
    },
    {
        name: "size",
        baseName: "size",
        type: "number",
    },
    {
        name: "width",
        baseName: "width",
        type: "number",
    },
    {
        name: "height",
        baseName: "height",
        type: "number",
    },
    {
        name: "horizontalResolution",
        baseName: "horizontalResolution",
        type: "number",
    },
    {
        name: "verticalResolution",
        baseName: "verticalResolution",
        type: "number",
    },
    {
        name: "bitsPerPixel",
        baseName: "bitsPerPixel",
        type: "number",
    },
    {
        name: "title",
        baseName: "title",
        type: "string",
    },
    {
        name: "author",
        baseName: "author",
        type: "string",
    },
    {
        name: "createdDate",
        baseName: "createdDate",
        type: "Date",
    },
    {
        name: "modifiedDate",
        baseName: "modifiedDate",
        type: "Date",
    },
    {
        name: "layers",
        baseName: "layers",
        type: "Array<string>",
    },
    {
        name: "isPasswordProtected",
        baseName: "isPasswordProtected",
        type: "boolean",
    }
];
/**
 * The error details
 */
// tslint:disable: completed-docs
class ErrorDetails {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ErrorDetails.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ErrorDetails = ErrorDetails;
/**
 * Attribute type map
 */
ErrorDetails.attributeTypeMap = [
    {
        name: "requestId",
        baseName: "requestId",
        type: "string",
    },
    {
        name: "date",
        baseName: "date",
        type: "Date",
    }
];
/**
 * Represents field label
 */
// tslint:disable: completed-docs
class FieldLabel {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FieldLabel.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.FieldLabel = FieldLabel;
/**
 * Attribute type map
 */
FieldLabel.attributeTypeMap = [
    {
        name: "field",
        baseName: "field",
        type: "FieldLabel.FieldEnum",
    },
    {
        name: "label",
        baseName: "label",
        type: "string",
    }
];
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (FieldLabel) {
    let FieldEnum;
    (function (FieldEnum) {
        FieldEnum[FieldEnum["Start"] = 'Start'] = "Start";
        FieldEnum[FieldEnum["TabField"] = 'TabField'] = "TabField";
        FieldEnum[FieldEnum["Subject"] = 'Subject'] = "Subject";
        FieldEnum[FieldEnum["ShowTimeAs"] = 'ShowTimeAs'] = "ShowTimeAs";
        FieldEnum[FieldEnum["Sent"] = 'Sent'] = "Sent";
        FieldEnum[FieldEnum["RequiredAttendees"] = 'RequiredAttendees'] = "RequiredAttendees";
        FieldEnum[FieldEnum["RecurrencePattern"] = 'RecurrencePattern'] = "RecurrencePattern";
        FieldEnum[FieldEnum["Recurrence"] = 'Recurrence'] = "Recurrence";
        FieldEnum[FieldEnum["PageHeader"] = 'PageHeader'] = "PageHeader";
        FieldEnum[FieldEnum["Organizer"] = 'Organizer'] = "Organizer";
        FieldEnum[FieldEnum["Location"] = 'Location'] = "Location";
        FieldEnum[FieldEnum["Importance"] = 'Importance'] = "Importance";
        FieldEnum[FieldEnum["From"] = 'From'] = "From";
        FieldEnum[FieldEnum["End"] = 'End'] = "End";
        FieldEnum[FieldEnum["Bcc"] = 'Bcc'] = "Bcc";
        FieldEnum[FieldEnum["Attachments"] = 'Attachments'] = "Attachments";
        FieldEnum[FieldEnum["To"] = 'To'] = "To";
    })(FieldEnum = FieldLabel.FieldEnum || (FieldLabel.FieldEnum = {}));
})(FieldLabel || (exports.FieldLabel = FieldLabel = {}));
// tslint:enable:quotemark
/**
 * File versions FileVersion.
 */
// tslint:disable: completed-docs
class FileVersions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FileVersions.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.FileVersions = FileVersions;
/**
 * Attribute type map
 */
FileVersions.attributeTypeMap = [
    {
        name: "value",
        baseName: "value",
        type: "Array<FileVersion>",
    }
];
/**
 * Files list
 */
// tslint:disable: completed-docs
class FilesList {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FilesList.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.FilesList = FilesList;
/**
 * Attribute type map
 */
FilesList.attributeTypeMap = [
    {
        name: "value",
        baseName: "value",
        type: "Array<StorageFile>",
    }
];
/**
 * File upload result
 */
// tslint:disable: completed-docs
class FilesUploadResult {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FilesUploadResult.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.FilesUploadResult = FilesUploadResult;
/**
 * Attribute type map
 */
FilesUploadResult.attributeTypeMap = [
    {
        name: "uploaded",
        baseName: "uploaded",
        type: "Array<string>",
    },
    {
        name: "errors",
        baseName: "errors",
        type: "Array<Error>",
    }
];
/**
 * Current license information
 */
// tslint:disable: completed-docs
class LicenseInfo {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return LicenseInfo.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.LicenseInfo = LicenseInfo;
/**
 * Attribute type map
 */
LicenseInfo.attributeTypeMap = [
    {
        name: "isLicensed",
        baseName: "isLicensed",
        type: "boolean",
    }
];
/**
 * Load document options
 */
// tslint:disable: completed-docs
class LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return LoadOptions.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.LoadOptions = LoadOptions;
/**
 * Attribute type map
 */
LoadOptions.attributeTypeMap = [
    {
        name: "format",
        baseName: "format",
        type: "string",
    }
];
/**
 * Error
 */
// tslint:disable: completed-docs
class ModelError {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ModelError.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ModelError = ModelError;
/**
 * Attribute type map
 */
ModelError.attributeTypeMap = [
    {
        name: "code",
        baseName: "code",
        type: "string",
    },
    {
        name: "message",
        baseName: "message",
        type: "string",
    },
    {
        name: "description",
        baseName: "description",
        type: "string",
    },
    {
        name: "innerError",
        baseName: "innerError",
        type: "ErrorDetails",
    }
];
/**
 * Object exists
 */
// tslint:disable: completed-docs
class ObjectExist {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ObjectExist.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ObjectExist = ObjectExist;
/**
 * Attribute type map
 */
ObjectExist.attributeTypeMap = [
    {
        name: "exists",
        baseName: "exists",
        type: "boolean",
    },
    {
        name: "isFolder",
        baseName: "isFolder",
        type: "boolean",
    }
];
/**
 * Storage exists
 */
// tslint:disable: completed-docs
class StorageExist {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return StorageExist.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.StorageExist = StorageExist;
/**
 * Attribute type map
 */
StorageExist.attributeTypeMap = [
    {
        name: "exists",
        baseName: "exists",
        type: "boolean",
    }
];
/**
 * File or folder information
 */
// tslint:disable: completed-docs
class StorageFile {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return StorageFile.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.StorageFile = StorageFile;
/**
 * Attribute type map
 */
StorageFile.attributeTypeMap = [
    {
        name: "name",
        baseName: "name",
        type: "string",
    },
    {
        name: "isFolder",
        baseName: "isFolder",
        type: "boolean",
    },
    {
        name: "modifiedDate",
        baseName: "modifiedDate",
        type: "Date",
    },
    {
        name: "size",
        baseName: "size",
        type: "number",
    },
    {
        name: "path",
        baseName: "path",
        type: "string",
    }
];
/**
 * Contains single converted item. Result is provided as url to a storage
 */
// tslint:disable: completed-docs
class StoredConvertedResult {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return StoredConvertedResult.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.StoredConvertedResult = StoredConvertedResult;
/**
 * Attribute type map
 */
StoredConvertedResult.attributeTypeMap = [
    {
        name: "name",
        baseName: "name",
        type: "string",
    },
    {
        name: "size",
        baseName: "size",
        type: "number",
    },
    {
        name: "path",
        baseName: "path",
        type: "string",
    },
    {
        name: "url",
        baseName: "url",
        type: "string",
    }
];
/**
 * Represents information about supported conversion for SourceFormat
 */
// tslint:disable: completed-docs
class SupportedFormat {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return SupportedFormat.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.SupportedFormat = SupportedFormat;
/**
 * Attribute type map
 */
SupportedFormat.attributeTypeMap = [
    {
        name: "sourceFormat",
        baseName: "sourceFormat",
        type: "string",
    },
    {
        name: "targetFormats",
        baseName: "targetFormats",
        type: "Array<string>",
    }
];
/**
 * Options for settings watermark to the converted document
 */
// tslint:disable: completed-docs
class WatermarkOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return WatermarkOptions.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.WatermarkOptions = WatermarkOptions;
/**
 * Attribute type map
 */
WatermarkOptions.attributeTypeMap = [
    {
        name: "text",
        baseName: "text",
        type: "string",
    },
    {
        name: "fontName",
        baseName: "fontName",
        type: "string",
    },
    {
        name: "fontSize",
        baseName: "fontSize",
        type: "number",
    },
    {
        name: "bold",
        baseName: "bold",
        type: "boolean",
    },
    {
        name: "italic",
        baseName: "italic",
        type: "boolean",
    },
    {
        name: "color",
        baseName: "color",
        type: "string",
    },
    {
        name: "width",
        baseName: "width",
        type: "number",
    },
    {
        name: "height",
        baseName: "height",
        type: "number",
    },
    {
        name: "top",
        baseName: "top",
        type: "number",
    },
    {
        name: "left",
        baseName: "left",
        type: "number",
    },
    {
        name: "rotationAngle",
        baseName: "rotationAngle",
        type: "number",
    },
    {
        name: "transparency",
        baseName: "transparency",
        type: "number",
    },
    {
        name: "background",
        baseName: "background",
        type: "boolean",
    },
    {
        name: "image",
        baseName: "image",
        type: "string",
    },
    {
        name: "autoAlign",
        baseName: "autoAlign",
        type: "boolean",
    }
];
/**
 * Options for loading CAD documents
 */
// tslint:disable: completed-docs
class CadLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(CadLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.CadLoadOptions = CadLoadOptions;
/**
 * Attribute type map
 */
CadLoadOptions.attributeTypeMap = [
    {
        name: "layoutNames",
        baseName: "layoutNames",
        type: "Array<string>",
    },
    {
        name: "backgroundColor",
        baseName: "backgroundColor",
        type: "string",
    },
    {
        name: "drawType",
        baseName: "drawType",
        type: "CadLoadOptions.DrawTypeEnum",
    }
];
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (CadLoadOptions) {
    let DrawTypeEnum;
    (function (DrawTypeEnum) {
        DrawTypeEnum[DrawTypeEnum["UseDrawColor"] = 'UseDrawColor'] = "UseDrawColor";
        DrawTypeEnum[DrawTypeEnum["UseObjectColor"] = 'UseObjectColor'] = "UseObjectColor";
    })(DrawTypeEnum = CadLoadOptions.DrawTypeEnum || (CadLoadOptions.DrawTypeEnum = {}));
})(CadLoadOptions || (exports.CadLoadOptions = CadLoadOptions = {}));
// tslint:enable:quotemark
/**
 * Diagram document load options
 */
// tslint:disable: completed-docs
class DiagramLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DiagramLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DiagramLoadOptions = DiagramLoadOptions;
/**
 * Attribute type map
 */
DiagramLoadOptions.attributeTypeMap = [
    {
        name: "defaultFont",
        baseName: "defaultFont",
        type: "string",
    }
];
/**
 * Ebook convert options
 */
// tslint:disable: completed-docs
class EBookConvertOptions extends ConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EBookConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.EBookConvertOptions = EBookConvertOptions;
/**
 * Attribute type map
 */
EBookConvertOptions.attributeTypeMap = [
    {
        name: "pageSize",
        baseName: "pageSize",
        type: "EBookConvertOptions.PageSizeEnum",
    },
    {
        name: "pageOrientation",
        baseName: "pageOrientation",
        type: "EBookConvertOptions.PageOrientationEnum",
    }
];
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (EBookConvertOptions) {
    let PageSizeEnum;
    (function (PageSizeEnum) {
        PageSizeEnum[PageSizeEnum["Default"] = 'Default'] = "Default";
        PageSizeEnum[PageSizeEnum["A3"] = 'A3'] = "A3";
        PageSizeEnum[PageSizeEnum["Statement"] = 'Statement'] = "Statement";
        PageSizeEnum[PageSizeEnum["Quarto"] = 'Quarto'] = "Quarto";
        PageSizeEnum[PageSizeEnum["Paper11x17"] = 'Paper11x17'] = "Paper11x17";
        PageSizeEnum[PageSizeEnum["Paper10x14"] = 'Paper10x14'] = "Paper10x14";
        PageSizeEnum[PageSizeEnum["Letter"] = 'Letter'] = "Letter";
        PageSizeEnum[PageSizeEnum["Legal"] = 'Legal'] = "Legal";
        PageSizeEnum[PageSizeEnum["Ledger"] = 'Ledger'] = "Ledger";
        PageSizeEnum[PageSizeEnum["Folio"] = 'Folio'] = "Folio";
        PageSizeEnum[PageSizeEnum["Executive"] = 'Executive'] = "Executive";
        PageSizeEnum[PageSizeEnum["EnvelopeDL"] = 'EnvelopeDL'] = "EnvelopeDL";
        PageSizeEnum[PageSizeEnum["Custom"] = 'Custom'] = "Custom";
        PageSizeEnum[PageSizeEnum["B5"] = 'B5'] = "B5";
        PageSizeEnum[PageSizeEnum["B4"] = 'B4'] = "B4";
        PageSizeEnum[PageSizeEnum["A5"] = 'A5'] = "A5";
        PageSizeEnum[PageSizeEnum["A4"] = 'A4'] = "A4";
        PageSizeEnum[PageSizeEnum["Tabloid"] = 'Tabloid'] = "Tabloid";
    })(PageSizeEnum = EBookConvertOptions.PageSizeEnum || (EBookConvertOptions.PageSizeEnum = {}));
    let PageOrientationEnum;
    (function (PageOrientationEnum) {
        PageOrientationEnum[PageOrientationEnum["Default"] = 'Default'] = "Default";
        PageOrientationEnum[PageOrientationEnum["Landscape"] = 'Landscape'] = "Landscape";
        PageOrientationEnum[PageOrientationEnum["Portrait"] = 'Portrait'] = "Portrait";
    })(PageOrientationEnum = EBookConvertOptions.PageOrientationEnum || (EBookConvertOptions.PageOrientationEnum = {}));
})(EBookConvertOptions || (exports.EBookConvertOptions = EBookConvertOptions = {}));
// tslint:enable:quotemark
/**
 * Options for loading Email documents
 */
// tslint:disable: completed-docs
class EmailLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EmailLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.EmailLoadOptions = EmailLoadOptions;
/**
 * Attribute type map
 */
EmailLoadOptions.attributeTypeMap = [
    {
        name: "displayHeader",
        baseName: "displayHeader",
        type: "boolean",
    },
    {
        name: "displayFromEmailAddress",
        baseName: "displayFromEmailAddress",
        type: "boolean",
    },
    {
        name: "displayEmailAddress",
        baseName: "displayEmailAddress",
        type: "boolean",
    },
    {
        name: "displayToEmailAddress",
        baseName: "displayToEmailAddress",
        type: "boolean",
    },
    {
        name: "displayCcEmailAddress",
        baseName: "displayCcEmailAddress",
        type: "boolean",
    },
    {
        name: "displayBccEmailAddress",
        baseName: "displayBccEmailAddress",
        type: "boolean",
    },
    {
        name: "timeZoneOffset",
        baseName: "timeZoneOffset",
        type: "string",
    },
    {
        name: "convertAttachments",
        baseName: "convertAttachments",
        type: "boolean",
    },
    {
        name: "fieldLabels",
        baseName: "fieldLabels",
        type: "Array<FieldLabel>",
    },
    {
        name: "preserveOriginalDate",
        baseName: "preserveOriginalDate",
        type: "boolean",
    }
];
/**
 * File Version
 */
// tslint:disable: completed-docs
class FileVersion extends StorageFile {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FileVersion.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.FileVersion = FileVersion;
/**
 * Attribute type map
 */
FileVersion.attributeTypeMap = [
    {
        name: "versionId",
        baseName: "versionId",
        type: "string",
    },
    {
        name: "isLatest",
        baseName: "isLatest",
        type: "boolean",
    }
];
/**
 * Options for to Image conversion
 */
// tslint:disable: completed-docs
class ImageConvertOptions extends ConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ImageConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.ImageConvertOptions = ImageConvertOptions;
/**
 * Attribute type map
 */
ImageConvertOptions.attributeTypeMap = [
    {
        name: "width",
        baseName: "width",
        type: "number",
    },
    {
        name: "height",
        baseName: "height",
        type: "number",
    },
    {
        name: "horizontalResolution",
        baseName: "horizontalResolution",
        type: "number",
    },
    {
        name: "verticalResolution",
        baseName: "verticalResolution",
        type: "number",
    },
    {
        name: "grayscale",
        baseName: "grayscale",
        type: "boolean",
    },
    {
        name: "rotateAngle",
        baseName: "rotateAngle",
        type: "number",
    },
    {
        name: "usePdf",
        baseName: "usePdf",
        type: "boolean",
    },
    {
        name: "brightness",
        baseName: "brightness",
        type: "number",
    },
    {
        name: "contrast",
        baseName: "contrast",
        type: "number",
    },
    {
        name: "gamma",
        baseName: "gamma",
        type: "number",
    },
    {
        name: "flipMode",
        baseName: "flipMode",
        type: "ImageConvertOptions.FlipModeEnum",
    }
];
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (ImageConvertOptions) {
    let FlipModeEnum;
    (function (FlipModeEnum) {
        FlipModeEnum[FlipModeEnum["None"] = 'None'] = "None";
        FlipModeEnum[FlipModeEnum["FlipX"] = 'FlipX'] = "FlipX";
        FlipModeEnum[FlipModeEnum["FlipY"] = 'FlipY'] = "FlipY";
        FlipModeEnum[FlipModeEnum["FlipXY"] = 'FlipXY'] = "FlipXY";
    })(FlipModeEnum = ImageConvertOptions.FlipModeEnum || (ImageConvertOptions.FlipModeEnum = {}));
})(ImageConvertOptions || (exports.ImageConvertOptions = ImageConvertOptions = {}));
// tslint:enable:quotemark
/**
 * Image document load options
 */
// tslint:disable: completed-docs
class ImageLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ImageLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.ImageLoadOptions = ImageLoadOptions;
/**
 * Attribute type map
 */
ImageLoadOptions.attributeTypeMap = [
    {
        name: "defaultFont",
        baseName: "defaultFont",
        type: "string",
    }
];
/**
 * One document load options
 */
// tslint:disable: completed-docs
class OneLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OneLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OneLoadOptions = OneLoadOptions;
/**
 * Attribute type map
 */
OneLoadOptions.attributeTypeMap = [
    {
        name: "defaultFont",
        baseName: "defaultFont",
        type: "string",
    },
    {
        name: "fontSubstitutes",
        baseName: "fontSubstitutes",
        type: "{ [key: string]: string; }",
    },
    {
        name: "password",
        baseName: "password",
        type: "string",
    }
];
/**
 * Page description langusge convert options
 */
// tslint:disable: completed-docs
class PDLConvertOptions extends ConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PDLConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PDLConvertOptions = PDLConvertOptions;
/**
 * Attribute type map
 */
PDLConvertOptions.attributeTypeMap = [];
/**
 * Options for to PDF conversion
 */
// tslint:disable: completed-docs
class PdfConvertOptions extends ConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PdfConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PdfConvertOptions = PdfConvertOptions;
/**
 * Attribute type map
 */
PdfConvertOptions.attributeTypeMap = [
    {
        name: "width",
        baseName: "width",
        type: "number",
    },
    {
        name: "height",
        baseName: "height",
        type: "number",
    },
    {
        name: "dpi",
        baseName: "dpi",
        type: "number",
    },
    {
        name: "password",
        baseName: "password",
        type: "string",
    },
    {
        name: "marginTop",
        baseName: "marginTop",
        type: "number",
    },
    {
        name: "marginBottom",
        baseName: "marginBottom",
        type: "number",
    },
    {
        name: "marginLeft",
        baseName: "marginLeft",
        type: "number",
    },
    {
        name: "marginRight",
        baseName: "marginRight",
        type: "number",
    },
    {
        name: "pdfFormat",
        baseName: "pdfFormat",
        type: "PdfConvertOptions.PdfFormatEnum",
    },
    {
        name: "removePdfaCompliance",
        baseName: "removePdfaCompliance",
        type: "boolean",
    },
    {
        name: "zoom",
        baseName: "zoom",
        type: "number",
    },
    {
        name: "linearize",
        baseName: "linearize",
        type: "boolean",
    },
    {
        name: "linkDuplicateStreams",
        baseName: "linkDuplicateStreams",
        type: "boolean",
    },
    {
        name: "removeUnusedObjects",
        baseName: "removeUnusedObjects",
        type: "boolean",
    },
    {
        name: "removeUnusedStreams",
        baseName: "removeUnusedStreams",
        type: "boolean",
    },
    {
        name: "compressImages",
        baseName: "compressImages",
        type: "boolean",
    },
    {
        name: "imageQuality",
        baseName: "imageQuality",
        type: "number",
    },
    {
        name: "unembedFonts",
        baseName: "unembedFonts",
        type: "boolean",
    },
    {
        name: "grayscale",
        baseName: "grayscale",
        type: "boolean",
    },
    {
        name: "centerWindow",
        baseName: "centerWindow",
        type: "boolean",
    },
    {
        name: "direction",
        baseName: "direction",
        type: "PdfConvertOptions.DirectionEnum",
    },
    {
        name: "displayDocTitle",
        baseName: "displayDocTitle",
        type: "boolean",
    },
    {
        name: "fitWindow",
        baseName: "fitWindow",
        type: "boolean",
    },
    {
        name: "hideMenuBar",
        baseName: "hideMenuBar",
        type: "boolean",
    },
    {
        name: "hideToolBar",
        baseName: "hideToolBar",
        type: "boolean",
    },
    {
        name: "hideWindowUI",
        baseName: "hideWindowUI",
        type: "boolean",
    },
    {
        name: "nonFullScreenPageMode",
        baseName: "nonFullScreenPageMode",
        type: "PdfConvertOptions.NonFullScreenPageModeEnum",
    },
    {
        name: "pageLayout",
        baseName: "pageLayout",
        type: "PdfConvertOptions.PageLayoutEnum",
    },
    {
        name: "pageMode",
        baseName: "pageMode",
        type: "PdfConvertOptions.PageModeEnum",
    },
    {
        name: "rotate",
        baseName: "rotate",
        type: "PdfConvertOptions.RotateEnum",
    },
    {
        name: "pageSize",
        baseName: "pageSize",
        type: "PdfConvertOptions.PageSizeEnum",
    },
    {
        name: "pageOrientation",
        baseName: "pageOrientation",
        type: "PdfConvertOptions.PageOrientationEnum",
    }
];
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (PdfConvertOptions) {
    let PdfFormatEnum;
    (function (PdfFormatEnum) {
        PdfFormatEnum[PdfFormatEnum["Default"] = 'Default'] = "Default";
        PdfFormatEnum[PdfFormatEnum["PdfA1A"] = 'PdfA_1A'] = "PdfA1A";
        PdfFormatEnum[PdfFormatEnum["PdfA1B"] = 'PdfA_1B'] = "PdfA1B";
        PdfFormatEnum[PdfFormatEnum["PdfA2A"] = 'PdfA_2A'] = "PdfA2A";
        PdfFormatEnum[PdfFormatEnum["PdfA3A"] = 'PdfA_3A'] = "PdfA3A";
        PdfFormatEnum[PdfFormatEnum["PdfA2B"] = 'PdfA_2B'] = "PdfA2B";
        PdfFormatEnum[PdfFormatEnum["PdfA2U"] = 'PdfA_2U'] = "PdfA2U";
        PdfFormatEnum[PdfFormatEnum["PdfA3B"] = 'PdfA_3B'] = "PdfA3B";
        PdfFormatEnum[PdfFormatEnum["PdfA3U"] = 'PdfA_3U'] = "PdfA3U";
        PdfFormatEnum[PdfFormatEnum["V13"] = 'v1_3'] = "V13";
        PdfFormatEnum[PdfFormatEnum["V14"] = 'v1_4'] = "V14";
        PdfFormatEnum[PdfFormatEnum["V15"] = 'v1_5'] = "V15";
        PdfFormatEnum[PdfFormatEnum["V16"] = 'v1_6'] = "V16";
        PdfFormatEnum[PdfFormatEnum["V17"] = 'v1_7'] = "V17";
        PdfFormatEnum[PdfFormatEnum["PdfX1A"] = 'PdfX_1A'] = "PdfX1A";
        PdfFormatEnum[PdfFormatEnum["PdfX3"] = 'PdfX3'] = "PdfX3";
    })(PdfFormatEnum = PdfConvertOptions.PdfFormatEnum || (PdfConvertOptions.PdfFormatEnum = {}));
    let DirectionEnum;
    (function (DirectionEnum) {
        DirectionEnum[DirectionEnum["L2R"] = 'L2R'] = "L2R";
        DirectionEnum[DirectionEnum["R2L"] = 'R2L'] = "R2L";
    })(DirectionEnum = PdfConvertOptions.DirectionEnum || (PdfConvertOptions.DirectionEnum = {}));
    let NonFullScreenPageModeEnum;
    (function (NonFullScreenPageModeEnum) {
        NonFullScreenPageModeEnum[NonFullScreenPageModeEnum["UseNone"] = 'UseNone'] = "UseNone";
        NonFullScreenPageModeEnum[NonFullScreenPageModeEnum["UseOutlines"] = 'UseOutlines'] = "UseOutlines";
        NonFullScreenPageModeEnum[NonFullScreenPageModeEnum["UseThumbs"] = 'UseThumbs'] = "UseThumbs";
        NonFullScreenPageModeEnum[NonFullScreenPageModeEnum["FullScreen"] = 'FullScreen'] = "FullScreen";
        NonFullScreenPageModeEnum[NonFullScreenPageModeEnum["UseOC"] = 'UseOC'] = "UseOC";
        NonFullScreenPageModeEnum[NonFullScreenPageModeEnum["UseAttachments"] = 'UseAttachments'] = "UseAttachments";
    })(NonFullScreenPageModeEnum = PdfConvertOptions.NonFullScreenPageModeEnum || (PdfConvertOptions.NonFullScreenPageModeEnum = {}));
    let PageLayoutEnum;
    (function (PageLayoutEnum) {
        PageLayoutEnum[PageLayoutEnum["Default"] = 'Default'] = "Default";
        PageLayoutEnum[PageLayoutEnum["SinglePage"] = 'SinglePage'] = "SinglePage";
        PageLayoutEnum[PageLayoutEnum["OneColumn"] = 'OneColumn'] = "OneColumn";
        PageLayoutEnum[PageLayoutEnum["TwoColumnLeft"] = 'TwoColumnLeft'] = "TwoColumnLeft";
        PageLayoutEnum[PageLayoutEnum["TwoColumnRight"] = 'TwoColumnRight'] = "TwoColumnRight";
        PageLayoutEnum[PageLayoutEnum["TwoPageLeft"] = 'TwoPageLeft'] = "TwoPageLeft";
        PageLayoutEnum[PageLayoutEnum["TwoPageRight"] = 'TwoPageRight'] = "TwoPageRight";
    })(PageLayoutEnum = PdfConvertOptions.PageLayoutEnum || (PdfConvertOptions.PageLayoutEnum = {}));
    let PageModeEnum;
    (function (PageModeEnum) {
        PageModeEnum[PageModeEnum["UseNone"] = 'UseNone'] = "UseNone";
        PageModeEnum[PageModeEnum["UseOutlines"] = 'UseOutlines'] = "UseOutlines";
        PageModeEnum[PageModeEnum["UseThumbs"] = 'UseThumbs'] = "UseThumbs";
        PageModeEnum[PageModeEnum["FullScreen"] = 'FullScreen'] = "FullScreen";
        PageModeEnum[PageModeEnum["UseOC"] = 'UseOC'] = "UseOC";
        PageModeEnum[PageModeEnum["UseAttachments"] = 'UseAttachments'] = "UseAttachments";
    })(PageModeEnum = PdfConvertOptions.PageModeEnum || (PdfConvertOptions.PageModeEnum = {}));
    let RotateEnum;
    (function (RotateEnum) {
        RotateEnum[RotateEnum["None"] = 'None'] = "None";
        RotateEnum[RotateEnum["On90"] = 'On90'] = "On90";
        RotateEnum[RotateEnum["On180"] = 'On180'] = "On180";
        RotateEnum[RotateEnum["On270"] = 'On270'] = "On270";
    })(RotateEnum = PdfConvertOptions.RotateEnum || (PdfConvertOptions.RotateEnum = {}));
    let PageSizeEnum;
    (function (PageSizeEnum) {
        PageSizeEnum[PageSizeEnum["Default"] = 'Default'] = "Default";
        PageSizeEnum[PageSizeEnum["A3"] = 'A3'] = "A3";
        PageSizeEnum[PageSizeEnum["Statement"] = 'Statement'] = "Statement";
        PageSizeEnum[PageSizeEnum["Quarto"] = 'Quarto'] = "Quarto";
        PageSizeEnum[PageSizeEnum["Paper11x17"] = 'Paper11x17'] = "Paper11x17";
        PageSizeEnum[PageSizeEnum["Paper10x14"] = 'Paper10x14'] = "Paper10x14";
        PageSizeEnum[PageSizeEnum["Letter"] = 'Letter'] = "Letter";
        PageSizeEnum[PageSizeEnum["Legal"] = 'Legal'] = "Legal";
        PageSizeEnum[PageSizeEnum["Ledger"] = 'Ledger'] = "Ledger";
        PageSizeEnum[PageSizeEnum["Folio"] = 'Folio'] = "Folio";
        PageSizeEnum[PageSizeEnum["Executive"] = 'Executive'] = "Executive";
        PageSizeEnum[PageSizeEnum["EnvelopeDL"] = 'EnvelopeDL'] = "EnvelopeDL";
        PageSizeEnum[PageSizeEnum["Custom"] = 'Custom'] = "Custom";
        PageSizeEnum[PageSizeEnum["B5"] = 'B5'] = "B5";
        PageSizeEnum[PageSizeEnum["B4"] = 'B4'] = "B4";
        PageSizeEnum[PageSizeEnum["A5"] = 'A5'] = "A5";
        PageSizeEnum[PageSizeEnum["A4"] = 'A4'] = "A4";
        PageSizeEnum[PageSizeEnum["Tabloid"] = 'Tabloid'] = "Tabloid";
    })(PageSizeEnum = PdfConvertOptions.PageSizeEnum || (PdfConvertOptions.PageSizeEnum = {}));
    let PageOrientationEnum;
    (function (PageOrientationEnum) {
        PageOrientationEnum[PageOrientationEnum["Default"] = 'Default'] = "Default";
        PageOrientationEnum[PageOrientationEnum["Landscape"] = 'Landscape'] = "Landscape";
        PageOrientationEnum[PageOrientationEnum["Portrait"] = 'Portrait'] = "Portrait";
    })(PageOrientationEnum = PdfConvertOptions.PageOrientationEnum || (PdfConvertOptions.PageOrientationEnum = {}));
})(PdfConvertOptions || (exports.PdfConvertOptions = PdfConvertOptions = {}));
// tslint:enable:quotemark
/**
 * Pdf document load options
 */
// tslint:disable: completed-docs
class PdfLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PdfLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PdfLoadOptions = PdfLoadOptions;
/**
 * Attribute type map
 */
PdfLoadOptions.attributeTypeMap = [
    {
        name: "removeEmbeddedFiles",
        baseName: "removeEmbeddedFiles",
        type: "boolean",
    },
    {
        name: "password",
        baseName: "password",
        type: "string",
    },
    {
        name: "hidePdfAnnotations",
        baseName: "hidePdfAnnotations",
        type: "boolean",
    },
    {
        name: "flattenAllFields",
        baseName: "flattenAllFields",
        type: "boolean",
    }
];
/**
 * Options for loading personal storage documents.
 */
// tslint:disable: completed-docs
class PersonalStorageLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PersonalStorageLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PersonalStorageLoadOptions = PersonalStorageLoadOptions;
/**
 * Attribute type map
 */
PersonalStorageLoadOptions.attributeTypeMap = [
    {
        name: "folder",
        baseName: "folder",
        type: "string",
    },
    {
        name: "depth",
        baseName: "depth",
        type: "number",
    }
];
/**
 * Options for to presentation conversion
 */
// tslint:disable: completed-docs
class PresentationConvertOptions extends ConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PresentationConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PresentationConvertOptions = PresentationConvertOptions;
/**
 * Attribute type map
 */
PresentationConvertOptions.attributeTypeMap = [
    {
        name: "password",
        baseName: "password",
        type: "string",
    },
    {
        name: "zoom",
        baseName: "zoom",
        type: "number",
    }
];
/**
 * Presentation document load options
 */
// tslint:disable: completed-docs
class PresentationLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PresentationLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PresentationLoadOptions = PresentationLoadOptions;
/**
 * Attribute type map
 */
PresentationLoadOptions.attributeTypeMap = [
    {
        name: "defaultFont",
        baseName: "defaultFont",
        type: "string",
    },
    {
        name: "fontSubstitutes",
        baseName: "fontSubstitutes",
        type: "{ [key: string]: string; }",
    },
    {
        name: "password",
        baseName: "password",
        type: "string",
    },
    {
        name: "hideComments",
        baseName: "hideComments",
        type: "boolean",
    },
    {
        name: "showHiddenSlides",
        baseName: "showHiddenSlides",
        type: "boolean",
    }
];
/**
 * Spreadsheet сonvert options class
 */
// tslint:disable: completed-docs
class SpreadsheetConvertOptions extends ConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SpreadsheetConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.SpreadsheetConvertOptions = SpreadsheetConvertOptions;
/**
 * Attribute type map
 */
SpreadsheetConvertOptions.attributeTypeMap = [
    {
        name: "password",
        baseName: "password",
        type: "string",
    },
    {
        name: "zoom",
        baseName: "zoom",
        type: "number",
    },
    {
        name: "usePdf",
        baseName: "usePdf",
        type: "boolean",
    }
];
/**
 * Spreadsheet document load options
 */
// tslint:disable: completed-docs
class SpreadsheetLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SpreadsheetLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.SpreadsheetLoadOptions = SpreadsheetLoadOptions;
/**
 * Attribute type map
 */
SpreadsheetLoadOptions.attributeTypeMap = [
    {
        name: "defaultFont",
        baseName: "defaultFont",
        type: "string",
    },
    {
        name: "fontSubstitutes",
        baseName: "fontSubstitutes",
        type: "{ [key: string]: string; }",
    },
    {
        name: "showGridLines",
        baseName: "showGridLines",
        type: "boolean",
    },
    {
        name: "showHiddenSheets",
        baseName: "showHiddenSheets",
        type: "boolean",
    },
    {
        name: "onePagePerSheet",
        baseName: "onePagePerSheet",
        type: "boolean",
    },
    {
        name: "convertRange",
        baseName: "convertRange",
        type: "string",
    },
    {
        name: "skipEmptyRowsAndColumns",
        baseName: "skipEmptyRowsAndColumns",
        type: "boolean",
    },
    {
        name: "password",
        baseName: "password",
        type: "string",
    },
    {
        name: "hideComments",
        baseName: "hideComments",
        type: "boolean",
    }
];
/**
 * Txt convert options
 */
// tslint:disable: completed-docs
class TxtConvertOptions extends ConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TxtConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.TxtConvertOptions = TxtConvertOptions;
/**
 * Attribute type map
 */
TxtConvertOptions.attributeTypeMap = [];
/**
 * Txt document load options
 */
// tslint:disable: completed-docs
class TxtLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TxtLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.TxtLoadOptions = TxtLoadOptions;
/**
 * Attribute type map
 */
TxtLoadOptions.attributeTypeMap = [
    {
        name: "detectNumberingWithWhitespaces",
        baseName: "detectNumberingWithWhitespaces",
        type: "boolean",
    },
    {
        name: "trailingSpacesOptions",
        baseName: "trailingSpacesOptions",
        type: "TxtLoadOptions.TrailingSpacesOptionsEnum",
    },
    {
        name: "leadingSpacesOptions",
        baseName: "leadingSpacesOptions",
        type: "TxtLoadOptions.LeadingSpacesOptionsEnum",
    },
    {
        name: "encoding",
        baseName: "encoding",
        type: "string",
    }
];
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (TxtLoadOptions) {
    let TrailingSpacesOptionsEnum;
    (function (TrailingSpacesOptionsEnum) {
        TrailingSpacesOptionsEnum[TrailingSpacesOptionsEnum["Preserve"] = 'Preserve'] = "Preserve";
        TrailingSpacesOptionsEnum[TrailingSpacesOptionsEnum["Trim"] = 'Trim'] = "Trim";
    })(TrailingSpacesOptionsEnum = TxtLoadOptions.TrailingSpacesOptionsEnum || (TxtLoadOptions.TrailingSpacesOptionsEnum = {}));
    let LeadingSpacesOptionsEnum;
    (function (LeadingSpacesOptionsEnum) {
        LeadingSpacesOptionsEnum[LeadingSpacesOptionsEnum["ConvertToIndent"] = 'ConvertToIndent'] = "ConvertToIndent";
        LeadingSpacesOptionsEnum[LeadingSpacesOptionsEnum["Preserve"] = 'Preserve'] = "Preserve";
        LeadingSpacesOptionsEnum[LeadingSpacesOptionsEnum["Trim"] = 'Trim'] = "Trim";
    })(LeadingSpacesOptionsEnum = TxtLoadOptions.LeadingSpacesOptionsEnum || (TxtLoadOptions.LeadingSpacesOptionsEnum = {}));
})(TxtLoadOptions || (exports.TxtLoadOptions = TxtLoadOptions = {}));
// tslint:enable:quotemark
/**
 * Options for to Html conversion
 */
// tslint:disable: completed-docs
class WebConvertOptions extends ConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WebConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.WebConvertOptions = WebConvertOptions;
/**
 * Attribute type map
 */
WebConvertOptions.attributeTypeMap = [
    {
        name: "usePdf",
        baseName: "usePdf",
        type: "boolean",
    },
    {
        name: "fixedLayout",
        baseName: "fixedLayout",
        type: "boolean",
    },
    {
        name: "fixedLayoutShowBorders",
        baseName: "fixedLayoutShowBorders",
        type: "boolean",
    },
    {
        name: "zoom",
        baseName: "zoom",
        type: "number",
    }
];
/**
 * Html document load options
 */
// tslint:disable: completed-docs
class WebLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WebLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.WebLoadOptions = WebLoadOptions;
/**
 * Attribute type map
 */
WebLoadOptions.attributeTypeMap = [
    {
        name: "pageNumbering",
        baseName: "pageNumbering",
        type: "boolean",
    }
];
/**
 * Options for to word processing conversion
 */
// tslint:disable: completed-docs
class WordProcessingConvertOptions extends ConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WordProcessingConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.WordProcessingConvertOptions = WordProcessingConvertOptions;
/**
 * Attribute type map
 */
WordProcessingConvertOptions.attributeTypeMap = [
    {
        name: "width",
        baseName: "width",
        type: "number",
    },
    {
        name: "height",
        baseName: "height",
        type: "number",
    },
    {
        name: "dpi",
        baseName: "dpi",
        type: "number",
    },
    {
        name: "password",
        baseName: "password",
        type: "string",
    },
    {
        name: "zoom",
        baseName: "zoom",
        type: "number",
    },
    {
        name: "pdfRecognitionMode",
        baseName: "pdfRecognitionMode",
        type: "WordProcessingConvertOptions.PdfRecognitionModeEnum",
    },
    {
        name: "pageSize",
        baseName: "pageSize",
        type: "WordProcessingConvertOptions.PageSizeEnum",
    },
    {
        name: "pageOrientation",
        baseName: "pageOrientation",
        type: "WordProcessingConvertOptions.PageOrientationEnum",
    }
];
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (WordProcessingConvertOptions) {
    let PdfRecognitionModeEnum;
    (function (PdfRecognitionModeEnum) {
        PdfRecognitionModeEnum[PdfRecognitionModeEnum["Textbox"] = 'Textbox'] = "Textbox";
        PdfRecognitionModeEnum[PdfRecognitionModeEnum["Flow"] = 'Flow'] = "Flow";
    })(PdfRecognitionModeEnum = WordProcessingConvertOptions.PdfRecognitionModeEnum || (WordProcessingConvertOptions.PdfRecognitionModeEnum = {}));
    let PageSizeEnum;
    (function (PageSizeEnum) {
        PageSizeEnum[PageSizeEnum["Default"] = 'Default'] = "Default";
        PageSizeEnum[PageSizeEnum["A3"] = 'A3'] = "A3";
        PageSizeEnum[PageSizeEnum["Statement"] = 'Statement'] = "Statement";
        PageSizeEnum[PageSizeEnum["Quarto"] = 'Quarto'] = "Quarto";
        PageSizeEnum[PageSizeEnum["Paper11x17"] = 'Paper11x17'] = "Paper11x17";
        PageSizeEnum[PageSizeEnum["Paper10x14"] = 'Paper10x14'] = "Paper10x14";
        PageSizeEnum[PageSizeEnum["Letter"] = 'Letter'] = "Letter";
        PageSizeEnum[PageSizeEnum["Legal"] = 'Legal'] = "Legal";
        PageSizeEnum[PageSizeEnum["Ledger"] = 'Ledger'] = "Ledger";
        PageSizeEnum[PageSizeEnum["Folio"] = 'Folio'] = "Folio";
        PageSizeEnum[PageSizeEnum["Executive"] = 'Executive'] = "Executive";
        PageSizeEnum[PageSizeEnum["EnvelopeDL"] = 'EnvelopeDL'] = "EnvelopeDL";
        PageSizeEnum[PageSizeEnum["Custom"] = 'Custom'] = "Custom";
        PageSizeEnum[PageSizeEnum["B5"] = 'B5'] = "B5";
        PageSizeEnum[PageSizeEnum["B4"] = 'B4'] = "B4";
        PageSizeEnum[PageSizeEnum["A5"] = 'A5'] = "A5";
        PageSizeEnum[PageSizeEnum["A4"] = 'A4'] = "A4";
        PageSizeEnum[PageSizeEnum["Tabloid"] = 'Tabloid'] = "Tabloid";
    })(PageSizeEnum = WordProcessingConvertOptions.PageSizeEnum || (WordProcessingConvertOptions.PageSizeEnum = {}));
    let PageOrientationEnum;
    (function (PageOrientationEnum) {
        PageOrientationEnum[PageOrientationEnum["Default"] = 'Default'] = "Default";
        PageOrientationEnum[PageOrientationEnum["Landscape"] = 'Landscape'] = "Landscape";
        PageOrientationEnum[PageOrientationEnum["Portrait"] = 'Portrait'] = "Portrait";
    })(PageOrientationEnum = WordProcessingConvertOptions.PageOrientationEnum || (WordProcessingConvertOptions.PageOrientationEnum = {}));
})(WordProcessingConvertOptions || (exports.WordProcessingConvertOptions = WordProcessingConvertOptions = {}));
// tslint:enable:quotemark
/**
 * WordProcessing document load options
 */
// tslint:disable: completed-docs
class WordProcessingLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WordProcessingLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.WordProcessingLoadOptions = WordProcessingLoadOptions;
/**
 * Attribute type map
 */
WordProcessingLoadOptions.attributeTypeMap = [
    {
        name: "defaultFont",
        baseName: "defaultFont",
        type: "string",
    },
    {
        name: "autoFontSubstitution",
        baseName: "autoFontSubstitution",
        type: "boolean",
    },
    {
        name: "fontSubstitutes",
        baseName: "fontSubstitutes",
        type: "{ [key: string]: string; }",
    },
    {
        name: "password",
        baseName: "password",
        type: "string",
    },
    {
        name: "hideWordTrackedChanges",
        baseName: "hideWordTrackedChanges",
        type: "boolean",
    },
    {
        name: "hideComments",
        baseName: "hideComments",
        type: "boolean",
    },
    {
        name: "bookmarksOutlineLevel",
        baseName: "bookmarksOutlineLevel",
        type: "number",
    },
    {
        name: "headingsOutlineLevels",
        baseName: "headingsOutlineLevels",
        type: "number",
    },
    {
        name: "expandedOutlineLevels",
        baseName: "expandedOutlineLevels",
        type: "number",
    }
];
/**
 * XML document load options
 */
// tslint:disable: completed-docs
class XmlLoadOptions extends LoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XmlLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XmlLoadOptions = XmlLoadOptions;
/**
 * Attribute type map
 */
XmlLoadOptions.attributeTypeMap = [
    {
        name: "xslFo",
        baseName: "xslFo",
        type: "string",
    }
];
/**
 * Bmp convert options
 */
// tslint:disable: completed-docs
class BmpConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(BmpConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.BmpConvertOptions = BmpConvertOptions;
/**
 * Attribute type map
 */
BmpConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Bmp load options
 */
// tslint:disable: completed-docs
class BmpLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(BmpLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.BmpLoadOptions = BmpLoadOptions;
/**
 * Attribute type map
 */
BmpLoadOptions.attributeTypeMap = [];
/**
 * Cf2 load options
 */
// tslint:disable: completed-docs
class Cf2LoadOptions extends CadLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Cf2LoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.Cf2LoadOptions = Cf2LoadOptions;
/**
 * Attribute type map
 */
Cf2LoadOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Csv document load options
 */
// tslint:disable: completed-docs
class CsvLoadOptions extends SpreadsheetLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(CsvLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.CsvLoadOptions = CsvLoadOptions;
/**
 * Attribute type map
 */
CsvLoadOptions.attributeTypeMap = [
    {
        name: "separator",
        baseName: "separator",
        type: "string",
    },
    {
        name: "isMultiEncoded",
        baseName: "isMultiEncoded",
        type: "boolean",
    },
    {
        name: "hasFormula",
        baseName: "hasFormula",
        type: "boolean",
    },
    {
        name: "convertNumericData",
        baseName: "convertNumericData",
        type: "boolean",
    },
    {
        name: "convertDateTimeData",
        baseName: "convertDateTimeData",
        type: "boolean",
    },
    {
        name: "encoding",
        baseName: "encoding",
        type: "string",
    }
];
/**
 * Dcm convert options
 */
// tslint:disable: completed-docs
class DcmConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DcmConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DcmConvertOptions = DcmConvertOptions;
/**
 * Attribute type map
 */
DcmConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Dcm load options
 */
// tslint:disable: completed-docs
class DcmLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DcmLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DcmLoadOptions = DcmLoadOptions;
/**
 * Attribute type map
 */
DcmLoadOptions.attributeTypeMap = [];
/**
 * Dgn load options
 */
// tslint:disable: completed-docs
class DgnLoadOptions extends CadLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DgnLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DgnLoadOptions = DgnLoadOptions;
/**
 * Attribute type map
 */
DgnLoadOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Djvu convert options
 */
// tslint:disable: completed-docs
class DjvuConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DjvuConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DjvuConvertOptions = DjvuConvertOptions;
/**
 * Attribute type map
 */
DjvuConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Dng convert options
 */
// tslint:disable: completed-docs
class DngConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DngConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DngConvertOptions = DngConvertOptions;
/**
 * Attribute type map
 */
DngConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Dng load options
 */
// tslint:disable: completed-docs
class DngLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DngLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DngLoadOptions = DngLoadOptions;
/**
 * Attribute type map
 */
DngLoadOptions.attributeTypeMap = [];
/**
 * Doc convert options
 */
// tslint:disable: completed-docs
class DocConvertOptions extends WordProcessingConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DocConvertOptions = DocConvertOptions;
/**
 * Attribute type map
 */
DocConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Doc load options
 */
// tslint:disable: completed-docs
class DocLoadOptions extends WordProcessingLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DocLoadOptions = DocLoadOptions;
/**
 * Attribute type map
 */
DocLoadOptions.attributeTypeMap = [];
/**
 * Docm convert options
 */
// tslint:disable: completed-docs
class DocmConvertOptions extends WordProcessingConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocmConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DocmConvertOptions = DocmConvertOptions;
/**
 * Attribute type map
 */
DocmConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Docm load options
 */
// tslint:disable: completed-docs
class DocmLoadOptions extends WordProcessingLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocmLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DocmLoadOptions = DocmLoadOptions;
/**
 * Attribute type map
 */
DocmLoadOptions.attributeTypeMap = [];
/**
 * Docx convert options
 */
// tslint:disable: completed-docs
class DocxConvertOptions extends WordProcessingConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocxConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DocxConvertOptions = DocxConvertOptions;
/**
 * Attribute type map
 */
DocxConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Docx load options
 */
// tslint:disable: completed-docs
class DocxLoadOptions extends WordProcessingLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DocxLoadOptions = DocxLoadOptions;
/**
 * Attribute type map
 */
DocxLoadOptions.attributeTypeMap = [];
/**
 * Dot convert options
 */
// tslint:disable: completed-docs
class DotConvertOptions extends WordProcessingConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DotConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DotConvertOptions = DotConvertOptions;
/**
 * Attribute type map
 */
DotConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Dot load options
 */
// tslint:disable: completed-docs
class DotLoadOptions extends WordProcessingLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DotLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DotLoadOptions = DotLoadOptions;
/**
 * Attribute type map
 */
DotLoadOptions.attributeTypeMap = [];
/**
 * Dotm convert options
 */
// tslint:disable: completed-docs
class DotmConvertOptions extends WordProcessingConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DotmConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DotmConvertOptions = DotmConvertOptions;
/**
 * Attribute type map
 */
DotmConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Dotm load options
 */
// tslint:disable: completed-docs
class DotmLoadOptions extends WordProcessingLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DotmLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DotmLoadOptions = DotmLoadOptions;
/**
 * Attribute type map
 */
DotmLoadOptions.attributeTypeMap = [];
/**
 * Dotx convert options
 */
// tslint:disable: completed-docs
class DotxConvertOptions extends WordProcessingConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DotxConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DotxConvertOptions = DotxConvertOptions;
/**
 * Attribute type map
 */
DotxConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Dotx load options
 */
// tslint:disable: completed-docs
class DotxLoadOptions extends WordProcessingLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DotxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DotxLoadOptions = DotxLoadOptions;
/**
 * Attribute type map
 */
DotxLoadOptions.attributeTypeMap = [];
/**
 * Dwf load options
 */
// tslint:disable: completed-docs
class DwfLoadOptions extends CadLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DwfLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DwfLoadOptions = DwfLoadOptions;
/**
 * Attribute type map
 */
DwfLoadOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Dwfx load options
 */
// tslint:disable: completed-docs
class DwfxLoadOptions extends CadLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DwfxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DwfxLoadOptions = DwfxLoadOptions;
/**
 * Attribute type map
 */
DwfxLoadOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Dwg load options
 */
// tslint:disable: completed-docs
class DwgLoadOptions extends CadLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DwgLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DwgLoadOptions = DwgLoadOptions;
/**
 * Attribute type map
 */
DwgLoadOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Dwt load options
 */
// tslint:disable: completed-docs
class DwtLoadOptions extends CadLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DwtLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DwtLoadOptions = DwtLoadOptions;
/**
 * Attribute type map
 */
DwtLoadOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Dxf load options
 */
// tslint:disable: completed-docs
class DxfLoadOptions extends CadLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DxfLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.DxfLoadOptions = DxfLoadOptions;
/**
 * Attribute type map
 */
DxfLoadOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Emf convert options
 */
// tslint:disable: completed-docs
class EmfConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EmfConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.EmfConvertOptions = EmfConvertOptions;
/**
 * Attribute type map
 */
EmfConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Emf load options
 */
// tslint:disable: completed-docs
class EmfLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EmfLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.EmfLoadOptions = EmfLoadOptions;
/**
 * Attribute type map
 */
EmfLoadOptions.attributeTypeMap = [];
/**
 * Eml load options
 */
// tslint:disable: completed-docs
class EmlLoadOptions extends EmailLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EmlLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.EmlLoadOptions = EmlLoadOptions;
/**
 * Attribute type map
 */
EmlLoadOptions.attributeTypeMap = [];
/**
 * Emlx load options
 */
// tslint:disable: completed-docs
class EmlxLoadOptions extends EmailLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(EmlxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.EmlxLoadOptions = EmlxLoadOptions;
/**
 * Attribute type map
 */
EmlxLoadOptions.attributeTypeMap = [];
/**
 * Gif convert options
 */
// tslint:disable: completed-docs
class GifConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(GifConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.GifConvertOptions = GifConvertOptions;
/**
 * Attribute type map
 */
GifConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Gif load options
 */
// tslint:disable: completed-docs
class GifLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(GifLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.GifLoadOptions = GifLoadOptions;
/**
 * Attribute type map
 */
GifLoadOptions.attributeTypeMap = [];
/**
 * Ico convert options
 */
// tslint:disable: completed-docs
class IcoConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(IcoConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.IcoConvertOptions = IcoConvertOptions;
/**
 * Attribute type map
 */
IcoConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Ico load options
 */
// tslint:disable: completed-docs
class IcoLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(IcoLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.IcoLoadOptions = IcoLoadOptions;
/**
 * Attribute type map
 */
IcoLoadOptions.attributeTypeMap = [];
/**
 * Ifc load options
 */
// tslint:disable: completed-docs
class IfcLoadOptions extends CadLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(IfcLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.IfcLoadOptions = IfcLoadOptions;
/**
 * Attribute type map
 */
IfcLoadOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Igs load options
 */
// tslint:disable: completed-docs
class IgsLoadOptions extends CadLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(IgsLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.IgsLoadOptions = IgsLoadOptions;
/**
 * Attribute type map
 */
IgsLoadOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * J2c load options
 */
// tslint:disable: completed-docs
class J2cLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(J2cLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.J2cLoadOptions = J2cLoadOptions;
/**
 * Attribute type map
 */
J2cLoadOptions.attributeTypeMap = [];
/**
 * J2k load options
 */
// tslint:disable: completed-docs
class J2kLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(J2kLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.J2kLoadOptions = J2kLoadOptions;
/**
 * Attribute type map
 */
J2kLoadOptions.attributeTypeMap = [];
/**
 * Jp2 load options
 */
// tslint:disable: completed-docs
class Jp2LoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Jp2LoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.Jp2LoadOptions = Jp2LoadOptions;
/**
 * Attribute type map
 */
Jp2LoadOptions.attributeTypeMap = [];
/**
 * Jpeg load options
 */
// tslint:disable: completed-docs
class JpegLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(JpegLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.JpegLoadOptions = JpegLoadOptions;
/**
 * Attribute type map
 */
JpegLoadOptions.attributeTypeMap = [];
/**
 * Jpf load options
 */
// tslint:disable: completed-docs
class JpfLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(JpfLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.JpfLoadOptions = JpfLoadOptions;
/**
 * Attribute type map
 */
JpfLoadOptions.attributeTypeMap = [];
/**
 * Jpg convert options
 */
// tslint:disable: completed-docs
class JpgConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(JpgConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.JpgConvertOptions = JpgConvertOptions;
/**
 * Attribute type map
 */
JpgConvertOptions.attributeTypeMap = [
    {
        name: "quality",
        baseName: "quality",
        type: "number",
    }
];
// tslint:enable:quotemark
/**
 * Jpg load options
 */
// tslint:disable: completed-docs
class JpgLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(JpgLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.JpgLoadOptions = JpgLoadOptions;
/**
 * Attribute type map
 */
JpgLoadOptions.attributeTypeMap = [];
/**
 * Jpm load options
 */
// tslint:disable: completed-docs
class JpmLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(JpmLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.JpmLoadOptions = JpmLoadOptions;
/**
 * Attribute type map
 */
JpmLoadOptions.attributeTypeMap = [];
/**
 * Jpx load options
 */
// tslint:disable: completed-docs
class JpxLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(JpxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.JpxLoadOptions = JpxLoadOptions;
/**
 * Attribute type map
 */
JpxLoadOptions.attributeTypeMap = [];
/**
 * Mht load options
 */
// tslint:disable: completed-docs
class MhtLoadOptions extends EmailLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(MhtLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.MhtLoadOptions = MhtLoadOptions;
/**
 * Attribute type map
 */
MhtLoadOptions.attributeTypeMap = [];
/**
 * Mobi load options
 */
// tslint:disable: completed-docs
class MobiLoadOptions extends WordProcessingLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(MobiLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.MobiLoadOptions = MobiLoadOptions;
/**
 * Attribute type map
 */
MobiLoadOptions.attributeTypeMap = [];
/**
 * Msg load options
 */
// tslint:disable: completed-docs
class MsgLoadOptions extends EmailLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(MsgLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.MsgLoadOptions = MsgLoadOptions;
/**
 * Attribute type map
 */
MsgLoadOptions.attributeTypeMap = [];
/**
 * Odg convert options
 */
// tslint:disable: completed-docs
class OdgConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OdgConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OdgConvertOptions = OdgConvertOptions;
/**
 * Attribute type map
 */
OdgConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Odg load options
 */
// tslint:disable: completed-docs
class OdgLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OdgLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OdgLoadOptions = OdgLoadOptions;
/**
 * Attribute type map
 */
OdgLoadOptions.attributeTypeMap = [];
/**
 * Odp convert options
 */
// tslint:disable: completed-docs
class OdpConvertOptions extends PresentationConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OdpConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OdpConvertOptions = OdpConvertOptions;
/**
 * Attribute type map
 */
OdpConvertOptions.attributeTypeMap = [];
/**
 * Odp load options
 */
// tslint:disable: completed-docs
class OdpLoadOptions extends PresentationLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OdpLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OdpLoadOptions = OdpLoadOptions;
/**
 * Attribute type map
 */
OdpLoadOptions.attributeTypeMap = [];
/**
 * Ods convert options
 */
// tslint:disable: completed-docs
class OdsConvertOptions extends SpreadsheetConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OdsConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OdsConvertOptions = OdsConvertOptions;
/**
 * Attribute type map
 */
OdsConvertOptions.attributeTypeMap = [];
/**
 * Ods load options
 */
// tslint:disable: completed-docs
class OdsLoadOptions extends SpreadsheetLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OdsLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OdsLoadOptions = OdsLoadOptions;
/**
 * Attribute type map
 */
OdsLoadOptions.attributeTypeMap = [];
/**
 * Odt convert options
 */
// tslint:disable: completed-docs
class OdtConvertOptions extends WordProcessingConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OdtConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OdtConvertOptions = OdtConvertOptions;
/**
 * Attribute type map
 */
OdtConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Odt load options
 */
// tslint:disable: completed-docs
class OdtLoadOptions extends WordProcessingLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OdtLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OdtLoadOptions = OdtLoadOptions;
/**
 * Attribute type map
 */
OdtLoadOptions.attributeTypeMap = [];
/**
 * Ost load options
 */
// tslint:disable: completed-docs
class OstLoadOptions extends EmailLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OstLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OstLoadOptions = OstLoadOptions;
/**
 * Attribute type map
 */
OstLoadOptions.attributeTypeMap = [];
/**
 * Otp convert options
 */
// tslint:disable: completed-docs
class OtpConvertOptions extends PresentationConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OtpConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OtpConvertOptions = OtpConvertOptions;
/**
 * Attribute type map
 */
OtpConvertOptions.attributeTypeMap = [];
/**
 * Otp load options
 */
// tslint:disable: completed-docs
class OtpLoadOptions extends PresentationLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OtpLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OtpLoadOptions = OtpLoadOptions;
/**
 * Attribute type map
 */
OtpLoadOptions.attributeTypeMap = [];
/**
 * Ots convert options
 */
// tslint:disable: completed-docs
class OtsConvertOptions extends SpreadsheetConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OtsConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OtsConvertOptions = OtsConvertOptions;
/**
 * Attribute type map
 */
OtsConvertOptions.attributeTypeMap = [];
/**
 * Ots load options
 */
// tslint:disable: completed-docs
class OtsLoadOptions extends SpreadsheetLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OtsLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OtsLoadOptions = OtsLoadOptions;
/**
 * Attribute type map
 */
OtsLoadOptions.attributeTypeMap = [];
/**
 * Ott convert options
 */
// tslint:disable: completed-docs
class OttConvertOptions extends WordProcessingConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OttConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OttConvertOptions = OttConvertOptions;
/**
 * Attribute type map
 */
OttConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Ott load options
 */
// tslint:disable: completed-docs
class OttLoadOptions extends WordProcessingLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OttLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.OttLoadOptions = OttLoadOptions;
/**
 * Attribute type map
 */
OttLoadOptions.attributeTypeMap = [];
/**
 * Plt load options
 */
// tslint:disable: completed-docs
class PltLoadOptions extends CadLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PltLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PltLoadOptions = PltLoadOptions;
/**
 * Attribute type map
 */
PltLoadOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Png convert options
 */
// tslint:disable: completed-docs
class PngConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PngConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PngConvertOptions = PngConvertOptions;
/**
 * Attribute type map
 */
PngConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Png load options
 */
// tslint:disable: completed-docs
class PngLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PngLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PngLoadOptions = PngLoadOptions;
/**
 * Attribute type map
 */
PngLoadOptions.attributeTypeMap = [];
/**
 * Potm convert options
 */
// tslint:disable: completed-docs
class PotmConvertOptions extends PresentationConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PotmConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PotmConvertOptions = PotmConvertOptions;
/**
 * Attribute type map
 */
PotmConvertOptions.attributeTypeMap = [];
/**
 * Potm load options
 */
// tslint:disable: completed-docs
class PotmLoadOptions extends PresentationLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PotmLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PotmLoadOptions = PotmLoadOptions;
/**
 * Attribute type map
 */
PotmLoadOptions.attributeTypeMap = [];
/**
 * Potx convert options
 */
// tslint:disable: completed-docs
class PotxConvertOptions extends PresentationConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PotxConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PotxConvertOptions = PotxConvertOptions;
/**
 * Attribute type map
 */
PotxConvertOptions.attributeTypeMap = [];
/**
 * Potx load options
 */
// tslint:disable: completed-docs
class PotxLoadOptions extends PresentationLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PotxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PotxLoadOptions = PotxLoadOptions;
/**
 * Attribute type map
 */
PotxLoadOptions.attributeTypeMap = [];
/**
 * Pps convert options
 */
// tslint:disable: completed-docs
class PpsConvertOptions extends PresentationConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PpsConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PpsConvertOptions = PpsConvertOptions;
/**
 * Attribute type map
 */
PpsConvertOptions.attributeTypeMap = [];
/**
 * Pps load options
 */
// tslint:disable: completed-docs
class PpsLoadOptions extends PresentationLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PpsLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PpsLoadOptions = PpsLoadOptions;
/**
 * Attribute type map
 */
PpsLoadOptions.attributeTypeMap = [];
/**
 * Ppsm convert options
 */
// tslint:disable: completed-docs
class PpsmConvertOptions extends PresentationConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PpsmConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PpsmConvertOptions = PpsmConvertOptions;
/**
 * Attribute type map
 */
PpsmConvertOptions.attributeTypeMap = [];
/**
 * Ppsm load options
 */
// tslint:disable: completed-docs
class PpsmLoadOptions extends PresentationLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PpsmLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PpsmLoadOptions = PpsmLoadOptions;
/**
 * Attribute type map
 */
PpsmLoadOptions.attributeTypeMap = [];
/**
 * Ppsx convert options
 */
// tslint:disable: completed-docs
class PpsxConvertOptions extends PresentationConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PpsxConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PpsxConvertOptions = PpsxConvertOptions;
/**
 * Attribute type map
 */
PpsxConvertOptions.attributeTypeMap = [];
/**
 * Ppsx load options
 */
// tslint:disable: completed-docs
class PpsxLoadOptions extends PresentationLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PpsxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PpsxLoadOptions = PpsxLoadOptions;
/**
 * Attribute type map
 */
PpsxLoadOptions.attributeTypeMap = [];
/**
 * Ppt convert options
 */
// tslint:disable: completed-docs
class PptConvertOptions extends PresentationConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PptConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PptConvertOptions = PptConvertOptions;
/**
 * Attribute type map
 */
PptConvertOptions.attributeTypeMap = [];
/**
 * Ppt load options
 */
// tslint:disable: completed-docs
class PptLoadOptions extends PresentationLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PptLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PptLoadOptions = PptLoadOptions;
/**
 * Attribute type map
 */
PptLoadOptions.attributeTypeMap = [];
/**
 * Pptm convert options
 */
// tslint:disable: completed-docs
class PptmConvertOptions extends PresentationConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PptmConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PptmConvertOptions = PptmConvertOptions;
/**
 * Attribute type map
 */
PptmConvertOptions.attributeTypeMap = [];
/**
 * Pptm load options
 */
// tslint:disable: completed-docs
class PptmLoadOptions extends PresentationLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PptmLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PptmLoadOptions = PptmLoadOptions;
/**
 * Attribute type map
 */
PptmLoadOptions.attributeTypeMap = [];
/**
 * Pptx convert options
 */
// tslint:disable: completed-docs
class PptxConvertOptions extends PresentationConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PptxConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PptxConvertOptions = PptxConvertOptions;
/**
 * Attribute type map
 */
PptxConvertOptions.attributeTypeMap = [];
/**
 * Pptx load options
 */
// tslint:disable: completed-docs
class PptxLoadOptions extends PresentationLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PptxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PptxLoadOptions = PptxLoadOptions;
/**
 * Attribute type map
 */
PptxLoadOptions.attributeTypeMap = [];
/**
 * Psd convert options
 */
// tslint:disable: completed-docs
class PsdConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PsdConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PsdConvertOptions = PsdConvertOptions;
/**
 * Attribute type map
 */
PsdConvertOptions.attributeTypeMap = [
    {
        name: "channelBitsCount",
        baseName: "channelBitsCount",
        type: "number",
    },
    {
        name: "channelsCount",
        baseName: "channelsCount",
        type: "number",
    },
    {
        name: "colorMode",
        baseName: "colorMode",
        type: "PsdConvertOptions.ColorModeEnum",
    },
    {
        name: "compressionMethod",
        baseName: "compressionMethod",
        type: "PsdConvertOptions.CompressionMethodEnum",
    },
    {
        name: "version",
        baseName: "version",
        type: "number",
    }
];
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (PsdConvertOptions) {
    let ColorModeEnum;
    (function (ColorModeEnum) {
        ColorModeEnum[ColorModeEnum["Bitmap"] = 'Bitmap'] = "Bitmap";
        ColorModeEnum[ColorModeEnum["Grayscale"] = 'Grayscale'] = "Grayscale";
        ColorModeEnum[ColorModeEnum["Indexed"] = 'Indexed'] = "Indexed";
        ColorModeEnum[ColorModeEnum["Rgb"] = 'Rgb'] = "Rgb";
        ColorModeEnum[ColorModeEnum["Cmyk"] = 'Cmyk'] = "Cmyk";
        ColorModeEnum[ColorModeEnum["Multichannel"] = 'Multichannel'] = "Multichannel";
        ColorModeEnum[ColorModeEnum["Duotone"] = 'Duotone'] = "Duotone";
        ColorModeEnum[ColorModeEnum["Lab"] = 'Lab'] = "Lab";
    })(ColorModeEnum = PsdConvertOptions.ColorModeEnum || (PsdConvertOptions.ColorModeEnum = {}));
    let CompressionMethodEnum;
    (function (CompressionMethodEnum) {
        CompressionMethodEnum[CompressionMethodEnum["Raw"] = 'Raw'] = "Raw";
        CompressionMethodEnum[CompressionMethodEnum["Rle"] = 'Rle'] = "Rle";
        CompressionMethodEnum[CompressionMethodEnum["ZipWithoutPrediction"] = 'ZipWithoutPrediction'] = "ZipWithoutPrediction";
        CompressionMethodEnum[CompressionMethodEnum["ZipWithPrediction"] = 'ZipWithPrediction'] = "ZipWithPrediction";
    })(CompressionMethodEnum = PsdConvertOptions.CompressionMethodEnum || (PsdConvertOptions.CompressionMethodEnum = {}));
})(PsdConvertOptions || (exports.PsdConvertOptions = PsdConvertOptions = {}));
// tslint:enable:quotemark
/**
 * Psd load options
 */
// tslint:disable: completed-docs
class PsdLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PsdLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PsdLoadOptions = PsdLoadOptions;
/**
 * Attribute type map
 */
PsdLoadOptions.attributeTypeMap = [];
/**
 * Pst load options
 */
// tslint:disable: completed-docs
class PstLoadOptions extends EmailLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PstLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.PstLoadOptions = PstLoadOptions;
/**
 * Attribute type map
 */
PstLoadOptions.attributeTypeMap = [];
/**
 * Rtf convert options
 */
// tslint:disable: completed-docs
class RtfConvertOptions extends WordProcessingConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(RtfConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.RtfConvertOptions = RtfConvertOptions;
/**
 * Attribute type map
 */
RtfConvertOptions.attributeTypeMap = [
    {
        name: "exportImagesForOldReaders",
        baseName: "exportImagesForOldReaders",
        type: "boolean",
    }
];
// tslint:enable:quotemark
/**
 * Stl load options
 */
// tslint:disable: completed-docs
class StlLoadOptions extends CadLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(StlLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.StlLoadOptions = StlLoadOptions;
/**
 * Attribute type map
 */
StlLoadOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Tif load options
 */
// tslint:disable: completed-docs
class TifLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TifLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.TifLoadOptions = TifLoadOptions;
/**
 * Attribute type map
 */
TifLoadOptions.attributeTypeMap = [];
/**
 * Tiff convert options
 */
// tslint:disable: completed-docs
class TiffConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TiffConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.TiffConvertOptions = TiffConvertOptions;
/**
 * Attribute type map
 */
TiffConvertOptions.attributeTypeMap = [
    {
        name: "compression",
        baseName: "compression",
        type: "TiffConvertOptions.CompressionEnum",
    }
];
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (TiffConvertOptions) {
    let CompressionEnum;
    (function (CompressionEnum) {
        CompressionEnum[CompressionEnum["Lzw"] = 'Lzw'] = "Lzw";
        CompressionEnum[CompressionEnum["None"] = 'None'] = "None";
        CompressionEnum[CompressionEnum["Ccitt3"] = 'Ccitt3'] = "Ccitt3";
        CompressionEnum[CompressionEnum["Ccitt4"] = 'Ccitt4'] = "Ccitt4";
        CompressionEnum[CompressionEnum["Rle"] = 'Rle'] = "Rle";
    })(CompressionEnum = TiffConvertOptions.CompressionEnum || (TiffConvertOptions.CompressionEnum = {}));
})(TiffConvertOptions || (exports.TiffConvertOptions = TiffConvertOptions = {}));
// tslint:enable:quotemark
/**
 * Tiff load options
 */
// tslint:disable: completed-docs
class TiffLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TiffLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.TiffLoadOptions = TiffLoadOptions;
/**
 * Attribute type map
 */
TiffLoadOptions.attributeTypeMap = [];
/**
 * Tsv convert options
 */
// tslint:disable: completed-docs
class TsvConvertOptions extends SpreadsheetConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TsvConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.TsvConvertOptions = TsvConvertOptions;
/**
 * Attribute type map
 */
TsvConvertOptions.attributeTypeMap = [];
/**
 * Tsv load options
 */
// tslint:disable: completed-docs
class TsvLoadOptions extends SpreadsheetLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TsvLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.TsvLoadOptions = TsvLoadOptions;
/**
 * Attribute type map
 */
TsvLoadOptions.attributeTypeMap = [];
/**
 * Vdw load options
 */
// tslint:disable: completed-docs
class VdwLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VdwLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VdwLoadOptions = VdwLoadOptions;
/**
 * Attribute type map
 */
VdwLoadOptions.attributeTypeMap = [];
/**
 * Vdx load options
 */
// tslint:disable: completed-docs
class VdxLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VdxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VdxLoadOptions = VdxLoadOptions;
/**
 * Attribute type map
 */
VdxLoadOptions.attributeTypeMap = [];
/**
 * Vsd load options
 */
// tslint:disable: completed-docs
class VsdLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VsdLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VsdLoadOptions = VsdLoadOptions;
/**
 * Attribute type map
 */
VsdLoadOptions.attributeTypeMap = [];
/**
 * Vsdm load options
 */
// tslint:disable: completed-docs
class VsdmLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VsdmLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VsdmLoadOptions = VsdmLoadOptions;
/**
 * Attribute type map
 */
VsdmLoadOptions.attributeTypeMap = [];
/**
 * Vsdx load options
 */
// tslint:disable: completed-docs
class VsdxLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VsdxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VsdxLoadOptions = VsdxLoadOptions;
/**
 * Attribute type map
 */
VsdxLoadOptions.attributeTypeMap = [];
/**
 * Vss load options
 */
// tslint:disable: completed-docs
class VssLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VssLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VssLoadOptions = VssLoadOptions;
/**
 * Attribute type map
 */
VssLoadOptions.attributeTypeMap = [];
/**
 * Vssm load options
 */
// tslint:disable: completed-docs
class VssmLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VssmLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VssmLoadOptions = VssmLoadOptions;
/**
 * Attribute type map
 */
VssmLoadOptions.attributeTypeMap = [];
/**
 * Vssx load options
 */
// tslint:disable: completed-docs
class VssxLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VssxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VssxLoadOptions = VssxLoadOptions;
/**
 * Attribute type map
 */
VssxLoadOptions.attributeTypeMap = [];
/**
 * Vst load options
 */
// tslint:disable: completed-docs
class VstLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VstLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VstLoadOptions = VstLoadOptions;
/**
 * Attribute type map
 */
VstLoadOptions.attributeTypeMap = [];
/**
 * Vstm load options
 */
// tslint:disable: completed-docs
class VstmLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VstmLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VstmLoadOptions = VstmLoadOptions;
/**
 * Attribute type map
 */
VstmLoadOptions.attributeTypeMap = [];
/**
 * Vstx load options
 */
// tslint:disable: completed-docs
class VstxLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VstxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VstxLoadOptions = VstxLoadOptions;
/**
 * Attribute type map
 */
VstxLoadOptions.attributeTypeMap = [];
/**
 * Vsx load options
 */
// tslint:disable: completed-docs
class VsxLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VsxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VsxLoadOptions = VsxLoadOptions;
/**
 * Attribute type map
 */
VsxLoadOptions.attributeTypeMap = [];
/**
 * Vtx load options
 */
// tslint:disable: completed-docs
class VtxLoadOptions extends DiagramLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(VtxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.VtxLoadOptions = VtxLoadOptions;
/**
 * Attribute type map
 */
VtxLoadOptions.attributeTypeMap = [];
/**
 * Webp convert options
 */
// tslint:disable: completed-docs
class WebpConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WebpConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.WebpConvertOptions = WebpConvertOptions;
/**
 * Attribute type map
 */
WebpConvertOptions.attributeTypeMap = [
    {
        name: "lossless",
        baseName: "lossless",
        type: "boolean",
    }
];
// tslint:enable:quotemark
/**
 * Webp load options
 */
// tslint:disable: completed-docs
class WebpLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WebpLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.WebpLoadOptions = WebpLoadOptions;
/**
 * Attribute type map
 */
WebpLoadOptions.attributeTypeMap = [];
/**
 * Wmf convert options
 */
// tslint:disable: completed-docs
class WmfConvertOptions extends ImageConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WmfConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.WmfConvertOptions = WmfConvertOptions;
/**
 * Attribute type map
 */
WmfConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Wmf load options
 */
// tslint:disable: completed-docs
class WmfLoadOptions extends ImageLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WmfLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.WmfLoadOptions = WmfLoadOptions;
/**
 * Attribute type map
 */
WmfLoadOptions.attributeTypeMap = [];
/**
 * Xls2003 convert options
 */
// tslint:disable: completed-docs
class Xls2003ConvertOptions extends SpreadsheetConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Xls2003ConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.Xls2003ConvertOptions = Xls2003ConvertOptions;
/**
 * Attribute type map
 */
Xls2003ConvertOptions.attributeTypeMap = [];
/**
 * Xls2003 load options
 */
// tslint:disable: completed-docs
class Xls2003LoadOptions extends SpreadsheetLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Xls2003LoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.Xls2003LoadOptions = Xls2003LoadOptions;
/**
 * Attribute type map
 */
Xls2003LoadOptions.attributeTypeMap = [];
/**
 * Xls convert options
 */
// tslint:disable: completed-docs
class XlsConvertOptions extends SpreadsheetConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XlsConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XlsConvertOptions = XlsConvertOptions;
/**
 * Attribute type map
 */
XlsConvertOptions.attributeTypeMap = [];
/**
 * Xls load options
 */
// tslint:disable: completed-docs
class XlsLoadOptions extends SpreadsheetLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XlsLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XlsLoadOptions = XlsLoadOptions;
/**
 * Attribute type map
 */
XlsLoadOptions.attributeTypeMap = [];
/**
 * Xlsb convert options
 */
// tslint:disable: completed-docs
class XlsbConvertOptions extends SpreadsheetConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XlsbConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XlsbConvertOptions = XlsbConvertOptions;
/**
 * Attribute type map
 */
XlsbConvertOptions.attributeTypeMap = [];
/**
 * Xlsb load options
 */
// tslint:disable: completed-docs
class XlsbLoadOptions extends SpreadsheetLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XlsbLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XlsbLoadOptions = XlsbLoadOptions;
/**
 * Attribute type map
 */
XlsbLoadOptions.attributeTypeMap = [];
/**
 * Xlsm convert options
 */
// tslint:disable: completed-docs
class XlsmConvertOptions extends SpreadsheetConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XlsmConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XlsmConvertOptions = XlsmConvertOptions;
/**
 * Attribute type map
 */
XlsmConvertOptions.attributeTypeMap = [];
/**
 * Xlsm load options
 */
// tslint:disable: completed-docs
class XlsmLoadOptions extends SpreadsheetLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XlsmLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XlsmLoadOptions = XlsmLoadOptions;
/**
 * Attribute type map
 */
XlsmLoadOptions.attributeTypeMap = [];
/**
 * Xlsx convert options
 */
// tslint:disable: completed-docs
class XlsxConvertOptions extends SpreadsheetConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XlsxConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XlsxConvertOptions = XlsxConvertOptions;
/**
 * Attribute type map
 */
XlsxConvertOptions.attributeTypeMap = [];
/**
 * Xlsx load options
 */
// tslint:disable: completed-docs
class XlsxLoadOptions extends SpreadsheetLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XlsxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XlsxLoadOptions = XlsxLoadOptions;
/**
 * Attribute type map
 */
XlsxLoadOptions.attributeTypeMap = [];
/**
 * Xltm convert options
 */
// tslint:disable: completed-docs
class XltmConvertOptions extends SpreadsheetConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XltmConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XltmConvertOptions = XltmConvertOptions;
/**
 * Attribute type map
 */
XltmConvertOptions.attributeTypeMap = [];
/**
 * Xltm load options
 */
// tslint:disable: completed-docs
class XltmLoadOptions extends SpreadsheetLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XltmLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XltmLoadOptions = XltmLoadOptions;
/**
 * Attribute type map
 */
XltmLoadOptions.attributeTypeMap = [];
/**
 * Xltx convert options
 */
// tslint:disable: completed-docs
class XltxConvertOptions extends SpreadsheetConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XltxConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XltxConvertOptions = XltxConvertOptions;
/**
 * Attribute type map
 */
XltxConvertOptions.attributeTypeMap = [];
/**
 * Xltx load options
 */
// tslint:disable: completed-docs
class XltxLoadOptions extends SpreadsheetLoadOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(XltxLoadOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.XltxLoadOptions = XltxLoadOptions;
/**
 * Attribute type map
 */
XltxLoadOptions.attributeTypeMap = [];
/**
 * J2c convert options
 */
// tslint:disable: completed-docs
class J2cConvertOptions extends JpgConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(J2cConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.J2cConvertOptions = J2cConvertOptions;
/**
 * Attribute type map
 */
J2cConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * J2k convert options
 */
// tslint:disable: completed-docs
class J2kConvertOptions extends JpgConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(J2kConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.J2kConvertOptions = J2kConvertOptions;
/**
 * Attribute type map
 */
J2kConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Jp2 convert options
 */
// tslint:disable: completed-docs
class Jp2ConvertOptions extends JpgConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Jp2ConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.Jp2ConvertOptions = Jp2ConvertOptions;
/**
 * Attribute type map
 */
Jp2ConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Jpeg convert options
 */
// tslint:disable: completed-docs
class JpegConvertOptions extends JpgConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(JpegConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.JpegConvertOptions = JpegConvertOptions;
/**
 * Attribute type map
 */
JpegConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Jpf convert options
 */
// tslint:disable: completed-docs
class JpfConvertOptions extends JpgConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(JpfConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.JpfConvertOptions = JpfConvertOptions;
/**
 * Attribute type map
 */
JpfConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Jpm convert options
 */
// tslint:disable: completed-docs
class JpmConvertOptions extends JpgConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(JpmConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.JpmConvertOptions = JpmConvertOptions;
/**
 * Attribute type map
 */
JpmConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Jpx convert options
 */
// tslint:disable: completed-docs
class JpxConvertOptions extends JpgConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(JpxConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.JpxConvertOptions = JpxConvertOptions;
/**
 * Attribute type map
 */
JpxConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
/**
 * Tif convert options
 */
// tslint:disable: completed-docs
class TifConvertOptions extends TiffConvertOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TifConvertOptions.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
}
exports.TifConvertOptions = TifConvertOptions;
/**
 * Attribute type map
 */
TifConvertOptions.attributeTypeMap = [];
// tslint:enable:quotemark
const enumsMap = {
    "FieldLabel.FieldEnum": FieldLabel.FieldEnum,
    "CadLoadOptions.DrawTypeEnum": CadLoadOptions.DrawTypeEnum,
    "EBookConvertOptions.PageSizeEnum": EBookConvertOptions.PageSizeEnum,
    "EBookConvertOptions.PageOrientationEnum": EBookConvertOptions.PageOrientationEnum,
    "ImageConvertOptions.FlipModeEnum": ImageConvertOptions.FlipModeEnum,
    "PdfConvertOptions.PdfFormatEnum": PdfConvertOptions.PdfFormatEnum,
    "PdfConvertOptions.DirectionEnum": PdfConvertOptions.DirectionEnum,
    "PdfConvertOptions.NonFullScreenPageModeEnum": PdfConvertOptions.NonFullScreenPageModeEnum,
    "PdfConvertOptions.PageLayoutEnum": PdfConvertOptions.PageLayoutEnum,
    "PdfConvertOptions.PageModeEnum": PdfConvertOptions.PageModeEnum,
    "PdfConvertOptions.RotateEnum": PdfConvertOptions.RotateEnum,
    "PdfConvertOptions.PageSizeEnum": PdfConvertOptions.PageSizeEnum,
    "PdfConvertOptions.PageOrientationEnum": PdfConvertOptions.PageOrientationEnum,
    "TxtLoadOptions.TrailingSpacesOptionsEnum": TxtLoadOptions.TrailingSpacesOptionsEnum,
    "TxtLoadOptions.LeadingSpacesOptionsEnum": TxtLoadOptions.LeadingSpacesOptionsEnum,
    "WordProcessingConvertOptions.PdfRecognitionModeEnum": WordProcessingConvertOptions.PdfRecognitionModeEnum,
    "WordProcessingConvertOptions.PageSizeEnum": WordProcessingConvertOptions.PageSizeEnum,
    "WordProcessingConvertOptions.PageOrientationEnum": WordProcessingConvertOptions.PageOrientationEnum,
    "PsdConvertOptions.ColorModeEnum": PsdConvertOptions.ColorModeEnum,
    "PsdConvertOptions.CompressionMethodEnum": PsdConvertOptions.CompressionMethodEnum,
    "TiffConvertOptions.CompressionEnum": TiffConvertOptions.CompressionEnum,
};
exports.enumsMap = enumsMap;
const typeMap = {
    ApiError,
    ApiErrorResponse,
    ConsumptionResult,
    ConvertOptions,
    ConvertSettings,
    DiscUsage,
    DocumentMetadata,
    ErrorDetails,
    FieldLabel,
    FileVersions,
    FilesList,
    FilesUploadResult,
    LicenseInfo,
    LoadOptions,
    ModelError,
    ObjectExist,
    StorageExist,
    StorageFile,
    StoredConvertedResult,
    SupportedFormat,
    WatermarkOptions,
    CadLoadOptions,
    DiagramLoadOptions,
    EBookConvertOptions,
    EmailLoadOptions,
    FileVersion,
    ImageConvertOptions,
    ImageLoadOptions,
    OneLoadOptions,
    PDLConvertOptions,
    PdfConvertOptions,
    PdfLoadOptions,
    PersonalStorageLoadOptions,
    PresentationConvertOptions,
    PresentationLoadOptions,
    SpreadsheetConvertOptions,
    SpreadsheetLoadOptions,
    TxtConvertOptions,
    TxtLoadOptions,
    WebConvertOptions,
    WebLoadOptions,
    WordProcessingConvertOptions,
    WordProcessingLoadOptions,
    XmlLoadOptions,
    BmpConvertOptions,
    BmpLoadOptions,
    Cf2LoadOptions,
    CsvLoadOptions,
    DcmConvertOptions,
    DcmLoadOptions,
    DgnLoadOptions,
    DjvuConvertOptions,
    DngConvertOptions,
    DngLoadOptions,
    DocConvertOptions,
    DocLoadOptions,
    DocmConvertOptions,
    DocmLoadOptions,
    DocxConvertOptions,
    DocxLoadOptions,
    DotConvertOptions,
    DotLoadOptions,
    DotmConvertOptions,
    DotmLoadOptions,
    DotxConvertOptions,
    DotxLoadOptions,
    DwfLoadOptions,
    DwfxLoadOptions,
    DwgLoadOptions,
    DwtLoadOptions,
    DxfLoadOptions,
    EmfConvertOptions,
    EmfLoadOptions,
    EmlLoadOptions,
    EmlxLoadOptions,
    GifConvertOptions,
    GifLoadOptions,
    IcoConvertOptions,
    IcoLoadOptions,
    IfcLoadOptions,
    IgsLoadOptions,
    J2cLoadOptions,
    J2kLoadOptions,
    Jp2LoadOptions,
    JpegLoadOptions,
    JpfLoadOptions,
    JpgConvertOptions,
    JpgLoadOptions,
    JpmLoadOptions,
    JpxLoadOptions,
    MhtLoadOptions,
    MobiLoadOptions,
    MsgLoadOptions,
    OdgConvertOptions,
    OdgLoadOptions,
    OdpConvertOptions,
    OdpLoadOptions,
    OdsConvertOptions,
    OdsLoadOptions,
    OdtConvertOptions,
    OdtLoadOptions,
    OstLoadOptions,
    OtpConvertOptions,
    OtpLoadOptions,
    OtsConvertOptions,
    OtsLoadOptions,
    OttConvertOptions,
    OttLoadOptions,
    PltLoadOptions,
    PngConvertOptions,
    PngLoadOptions,
    PotmConvertOptions,
    PotmLoadOptions,
    PotxConvertOptions,
    PotxLoadOptions,
    PpsConvertOptions,
    PpsLoadOptions,
    PpsmConvertOptions,
    PpsmLoadOptions,
    PpsxConvertOptions,
    PpsxLoadOptions,
    PptConvertOptions,
    PptLoadOptions,
    PptmConvertOptions,
    PptmLoadOptions,
    PptxConvertOptions,
    PptxLoadOptions,
    PsdConvertOptions,
    PsdLoadOptions,
    PstLoadOptions,
    RtfConvertOptions,
    StlLoadOptions,
    TifLoadOptions,
    TiffConvertOptions,
    TiffLoadOptions,
    TsvConvertOptions,
    TsvLoadOptions,
    VdwLoadOptions,
    VdxLoadOptions,
    VsdLoadOptions,
    VsdmLoadOptions,
    VsdxLoadOptions,
    VssLoadOptions,
    VssmLoadOptions,
    VssxLoadOptions,
    VstLoadOptions,
    VstmLoadOptions,
    VstxLoadOptions,
    VsxLoadOptions,
    VtxLoadOptions,
    WebpConvertOptions,
    WebpLoadOptions,
    WmfConvertOptions,
    WmfLoadOptions,
    Xls2003ConvertOptions,
    Xls2003LoadOptions,
    XlsConvertOptions,
    XlsLoadOptions,
    XlsbConvertOptions,
    XlsbLoadOptions,
    XlsmConvertOptions,
    XlsmLoadOptions,
    XlsxConvertOptions,
    XlsxLoadOptions,
    XltmConvertOptions,
    XltmLoadOptions,
    XltxConvertOptions,
    XltxLoadOptions,
    J2cConvertOptions,
    J2kConvertOptions,
    Jp2ConvertOptions,
    JpegConvertOptions,
    JpfConvertOptions,
    JpmConvertOptions,
    JpxConvertOptions,
    TifConvertOptions,
};
exports.typeMap = typeMap;
/**
 * Request model for ConvertDocument operation.
 */
class ConvertDocumentRequest {
    constructor(convertSettings) {
        this.convertSettings = convertSettings;
    }
}
exports.ConvertDocumentRequest = ConvertDocumentRequest;
/**
 * Request model for ConvertDocumentDirect operation.
 */
class ConvertDocumentDirectRequest {
    constructor(format, file, fromPage, pagesCount, loadOptions, convertOptions) {
        this.format = format;
        this.file = file;
        this.fromPage = fromPage;
        this.pagesCount = pagesCount;
        this.loadOptions = loadOptions;
        this.convertOptions = convertOptions;
    }
}
exports.ConvertDocumentDirectRequest = ConvertDocumentDirectRequest;
/**
 * Request model for CopyFile operation.
 */
class CopyFileRequest {
    constructor(srcPath, destPath, srcStorageName, destStorageName, versionId) {
        this.srcPath = srcPath;
        this.destPath = destPath;
        this.srcStorageName = srcStorageName;
        this.destStorageName = destStorageName;
        this.versionId = versionId;
    }
}
exports.CopyFileRequest = CopyFileRequest;
/**
 * Request model for DeleteFile operation.
 */
class DeleteFileRequest {
    constructor(path, storageName, versionId) {
        this.path = path;
        this.storageName = storageName;
        this.versionId = versionId;
    }
}
exports.DeleteFileRequest = DeleteFileRequest;
/**
 * Request model for DownloadFile operation.
 */
class DownloadFileRequest {
    constructor(path, storageName, versionId) {
        this.path = path;
        this.storageName = storageName;
        this.versionId = versionId;
    }
}
exports.DownloadFileRequest = DownloadFileRequest;
/**
 * Request model for MoveFile operation.
 */
class MoveFileRequest {
    constructor(srcPath, destPath, srcStorageName, destStorageName, versionId) {
        this.srcPath = srcPath;
        this.destPath = destPath;
        this.srcStorageName = srcStorageName;
        this.destStorageName = destStorageName;
        this.versionId = versionId;
    }
}
exports.MoveFileRequest = MoveFileRequest;
/**
 * Request model for UploadFile operation.
 */
class UploadFileRequest {
    constructor(path, file, storageName) {
        this.path = path;
        this.file = file;
        this.storageName = storageName;
    }
}
exports.UploadFileRequest = UploadFileRequest;
/**
 * Request model for CopyFolder operation.
 */
class CopyFolderRequest {
    constructor(srcPath, destPath, srcStorageName, destStorageName) {
        this.srcPath = srcPath;
        this.destPath = destPath;
        this.srcStorageName = srcStorageName;
        this.destStorageName = destStorageName;
    }
}
exports.CopyFolderRequest = CopyFolderRequest;
/**
 * Request model for CreateFolder operation.
 */
class CreateFolderRequest {
    constructor(path, storageName) {
        this.path = path;
        this.storageName = storageName;
    }
}
exports.CreateFolderRequest = CreateFolderRequest;
/**
 * Request model for DeleteFolder operation.
 */
class DeleteFolderRequest {
    constructor(path, storageName, recursive) {
        this.path = path;
        this.storageName = storageName;
        this.recursive = recursive;
    }
}
exports.DeleteFolderRequest = DeleteFolderRequest;
/**
 * Request model for GetFilesList operation.
 */
class GetFilesListRequest {
    constructor(path, storageName) {
        this.path = path;
        this.storageName = storageName;
    }
}
exports.GetFilesListRequest = GetFilesListRequest;
/**
 * Request model for MoveFolder operation.
 */
class MoveFolderRequest {
    constructor(srcPath, destPath, srcStorageName, destStorageName) {
        this.srcPath = srcPath;
        this.destPath = destPath;
        this.srcStorageName = srcStorageName;
        this.destStorageName = destStorageName;
    }
}
exports.MoveFolderRequest = MoveFolderRequest;
/**
 * Request model for GetDocumentMetadata operation.
 */
class GetDocumentMetadataRequest {
    constructor(filePath, storageName) {
        this.filePath = filePath;
        this.storageName = storageName;
    }
}
exports.GetDocumentMetadataRequest = GetDocumentMetadataRequest;
/**
 * Request model for GetSupportedConversionTypes operation.
 */
class GetSupportedConversionTypesRequest {
    constructor(filePath, storageName, format) {
        this.filePath = filePath;
        this.storageName = storageName;
        this.format = format;
    }
}
exports.GetSupportedConversionTypesRequest = GetSupportedConversionTypesRequest;
/**
 * Request model for GetDiscUsage operation.
 */
class GetDiscUsageRequest {
    constructor(storageName) {
        this.storageName = storageName;
    }
}
exports.GetDiscUsageRequest = GetDiscUsageRequest;
/**
 * Request model for GetFileVersions operation.
 */
class GetFileVersionsRequest {
    constructor(path, storageName) {
        this.path = path;
        this.storageName = storageName;
    }
}
exports.GetFileVersionsRequest = GetFileVersionsRequest;
/**
 * Request model for ObjectExists operation.
 */
class ObjectExistsRequest {
    constructor(path, storageName, versionId) {
        this.path = path;
        this.storageName = storageName;
        this.versionId = versionId;
    }
}
exports.ObjectExistsRequest = ObjectExistsRequest;
/**
 * Request model for StorageExists operation.
 */
class StorageExistsRequest {
    constructor(storageName) {
        this.storageName = storageName;
    }
}
exports.StorageExistsRequest = StorageExistsRequest;
